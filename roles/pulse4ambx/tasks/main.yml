---

##########################################################
#                         Version                        #
##########################################################

 - name: VERSION - Set version for this playbook
   set_fact:
     PLAYBOOK_VERSION: '3.1.6'

 - name: VERSION - Display version
   debug:
     msg:
     - "Playbook Version: {{ PLAYBOOK_VERSION }}"
     
     
##########################################################
#                         Checks                         #
##########################################################

 - name: PRE-CHECKS - Check platform requierement
   fail:
     msg: The OS platform is outdated ( {{ ansible_distribution }} , {{ ansible_distribution_version }} )
   when: 
     - ansible_distribution == 'CentOS'
     - ansible_distribution_version < 7.6
   

##########################################################
#                    Compute variables                   #
##########################################################

 - name: VARS - Set XMPP_DOMAIN to ansible_hostname if not on pulsemain
   set_fact:
     XMPP_DOMAIN: "{{ ansible_hostname }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: VARS - Set SERVER_FQDN to ansible_fqdn
   set_fact:
     SERVER_FQDN: "{{ ansible_fqdn }}"
   when:
     - SERVER_FQDN == ''
   no_log: True

 - name: VARS - Set IP_ADDRESS if INTERFACE defined
   set_fact:
     IP_ADDRESS: "{{ vars['ansible_'~INTERFACE].ipv4.address }}"
   when:
     - INTERFACE != ''
   no_log: True

 - name: VARS - Set IP_ADDRESS if INTERFACE not defined
   set_fact:
     IP_ADDRESS: "{{ ansible_default_ipv4.address }}"
   when:
     - INTERFACE == ''
   no_log: True

 - name: VARS - Set IP_REMOTE_SERVER if INTERFACE_TO_PULSE defined
   set_fact:
     IP_REMOTE_SERVER: "{{ vars['ansible_'~INTERFACE_TO_PULSE].ipv4.address }}"
   when:
     - INTERFACE_TO_PULSE != ''
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: VARS - Set IP_REMOTE_SERVER if INTERFACE_TO_PULSE not defined
   set_fact:
     IP_REMOTE_SERVER: "{{ ansible_default_ipv4.address }}"
   when:
     - INTERFACE_TO_PULSE == ''
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: VARS - Set CLUSTER_NAME to MULTISITE_ENTITY for relay
   set_fact:
     CLUSTER_NAME: "{{ MULTISITE_ENTITY }}"
   when:
     - INSTALL_TYPE != 'p'
     - MULTISITE_ENTITY != ''
   no_log: True

 - name: VARS - Set CLUSTER_NAME to ansible_hostname if entity not defined
   set_fact:
     CLUSTER_NAME: "{{ ansible_hostname }}"
   when:
     - MULTISITE_ENTITY == ''
     - MAIN_ENTITY == ''
   no_log: True

 - name: CNAM - Get location of AMBox
   command: "mysql -h {{ GLPI_DBHOST }} -P {{ GLPI_DBPORT }} -u{{ GLPI_DBUSER }} -p{{ GLPI_DBPASSWD }} -s glpi -e \"SELECT glpi_locations.completename FROM glpi_locations LEFT JOIN glpi_computers ON glpi_computers.locations_id=glpi_locations.id WHERE glpi_computers.name = '{{ ansible_hostname }}'\""
   register: ambxlocation
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CNAM - Get entity of AMBox
   command: "mysql -h {{ GLPI_DBHOST }} -P {{ GLPI_DBPORT }} -u{{ GLPI_DBUSER }} -p{{ GLPI_DBPASSWD }} -s glpi -e \"SELECT glpi_entities.completename FROM glpi_entities LEFT JOIN glpi_computers ON glpi_computers.entities_id=glpi_entities.id WHERE glpi_computers.name = '{{ ansible_hostname }}'\""
   register: ambxentity
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CNAM - Set CLUSTER_DESCRIPTION to AMBox entity and location
   set_fact:
     CLUSTER_DESCRIPTION: "{{ ambxentity.stdout.split(' > ')[3:] | join(' > ') }} # {{ ambxlocation.stdout }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CNAM - Set CLUSTER_NAME to MD5 hash of AMBox description prefixed with UCANSS number
   set_fact:
     CLUSTER_NAME: "{{ ansible_hostname[:6] }}-{{ CLUSTER_DESCRIPTION | hash('md5') }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

##########################################################
#                  Preparation checks                    #
##########################################################

 - name: PREPARATION - Make sure ssh key exists
   user:
     name: root
     generate_ssh_key: yes
     ssh_key_bits: 2048
   register: sshkey
   no_log: True

 - name: PREPARATION - Add relay ssh public key to authorized_keys on pulsemain
   authorized_key:
     user: root
     state: present
     key: "{{ sshkey.ssh_public_key }}"
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: PREPARATION - Fetch ssh public key from pulsemain
   user:
     name: root
     generate_ssh_key: yes
     ssh_key_bits: 2048
   register: pulsemain_sshkey
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: PREPARATION - Add pulsemain ssh public key to authorized_keys on relay
   authorized_key:
     user: root
     state: present
     key: "{{ pulsemain_sshkey.ssh_public_key }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: PREPARATION - Create rbash shell
   file:
     src: /bin/bash
     dest: /bin/rbash
     state: link
     force: yes
   no_log: True

 - name: PREPARATION - Delete old siveo repo
   file:
     path: '{{ item }}'
     state: absent
   with_items:
     - /etc/yum.repos.d/pulse4.repo
     - /etc/yum.repos.d/siveo.repo
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Download repo file from {{ PULSE4REPO_URL }}
   get_url:
     url: '{{ PULSE4REPO_URL }}'
     dest: /etc/yum.repos.d/pulse4.repo
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Find out URL of SIVEO public key
   command: "grep -m1 -ir 'gpgkey=' /etc/yum.repos.d/pulse4.repo"
   register: grep_output
   ignore_errors: true
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Import SIVEO public key
   rpm_key:
     state: present
     key: '{{ grep_output.stdout.split("=")[1] }}'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Clean yum repo metadata
   command: yum clean metadata
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Clean yum repo cache
   command: yum clean all
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PREPARATION - Disable pulse2-package-server and deps
   lineinfile:
     dest:  /etc/yum.conf
     state: present
     line: exclude= pulse2-common pulse2-package-server python-pulse2-common python-mmc-core pulse2-uuid-resolver python-mmc-backuppc
   no_log: True

##########################################################
#                    Install base tools                  #
##########################################################

 - name: BASE - Install tools needed for the setup
   yum:
     update_cache: yes
     state: latest
     pkg:
       - crudini
       - pwgen
       - xmlstarlet
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

##########################################################
#                   Install pulse relay                  #
##########################################################

 - name: PULSE - Install pulse-xmpp-agent-relay
   yum:
     state: latest
     pkg:
       - pulse-xmpp-agent-relay-2.1.5
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

##########################################################
#                     Install apache                     #
##########################################################

 - name: APACHE - Install Apache
   yum:
     state: latest
     pkg:
       - httpd
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: APACHE - Ensure /etc/systemd/system/httpd.service.d exists
   file:
     path: /etc/systemd/system/httpd.service.d
     state: directory
     mode: '0755'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: APACHE - Configure PrivateTmp=false in nopt.conf
   copy:
     content: "[Service]\nPrivateTmp=false"
     dest: /etc/systemd/system/httpd.service.d/nopt.conf
     mode: '0644'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: APACHE - Enable service
   systemd:
     enabled: yes
     state: restarted
     daemon_reload: yes
     name: httpd
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: APACHE - Define APACHE_CONF_PATH for CentOS
   set_fact:
     APACHE_CONF_PATH: "/etc/httpd/conf.d"
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

##########################################################
#                     Install php-fpm                    #
##########################################################

 - name: PHP - Uninstall previous version
   yum:
     pkg:
       - php-common
       - php-mysql
     state: absent
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PHP - Install php
   yum:
     update_cache: yes
     pkg:
       - php
       - php-fpm
       - php-mysqlnd
     state: latest
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PHP - Update php.ini
   lineinfile:
     dest: /etc/php.ini
     regexp: "{{ item.regex }}"
     line: "{{ item.line }}"
   with_items:
     - { regex: '^post_max_size.*$', line: 'post_max_size = 200M' }
     - { regex: '^upload_max_filesize.*$', line: 'upload_max_filesize = 200M' }
     - { regex: '^memory_limit.*$', line: 'memory_limit = 1024M' }
     - { regex: '^short_open_tag.*$', line: 'short_open_tag = On' }
     - { regex: '^date.timezone.*$', line: 'date.timezone = Europe\/Paris/' }
     - { regex: '^session.cookie_httponly.*$', line: 'session.cookie_httponly = 1' }
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PHP - Enable service
   systemd:
     enabled: yes
     state: restarted
     name: php-fpm
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: PHP - Restart apache
   systemd:
     name: httpd
     state: restarted
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

##########################################################
#                     Install mariadb                    #
##########################################################

 - name: MARIADB - Install mariadb
   yum:
     state: latest
     pkg:
       - mariadb
       - mariadb-server
       - MySQL-python
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: MARIADB - Delete /var/lib/mysql
   file:
     path: /var/lib/mysql
     state: absent
   no_log: True

 - name: MARIADB - Delete /root/.my.cnf
   file:
     path: /root/.my.cnf
     state: absent
   no_log: True

 - name: MARIADB - Install initial database
   command: mysql_install_db
   no_log: True

 - name: MARIADB - Apply permissions on /var/lib/mysql/
   file:
     path: /var/lib/mysql
     state: directory
     owner: mysql
     group: mysql
     recurse: yes
   no_log: True

 - name: MARIADB - Apply permissions on /var/log/mariadb/
   file:
     path: /var/log/mariadb
     state: directory
     owner: mysql
     group: mysql
     recurse: yes
   no_log: True

 - name: MARIADB - Enable service
   systemd:
     enabled: yes
     state: restarted
     name: mariadb
   no_log: True

 - name: MARIADB - Define root password
   command: mysqladmin -u {{ DBADMINUSER }} password '{{ DBADMINPASSWD }}'
   no_log: True

 - name: MARIADB - Secure installation
   command: 'mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} mysql -e "{{ item }}"'
   with_items:
     - "FLUSH PRIVILEGES"
     - "DELETE FROM mysql.user WHERE User='{{ DBADMINUSER }}' AND Host NOT IN ('localhost', '127.0.0.1', '::1')"
     - "DELETE FROM mysql.user WHERE User=''"
     - "DELETE FROM mysql.db WHERE Db='test' OR Db='test\_%'"
     - "FLUSH PRIVILEGES"
   no_log: True

##########################################################
#                    Install ejabberd                    #
##########################################################

 - name: EJABBERD - Install ejabberd
   yum:
     state: latest
     pkg:
       - ejabberd
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: EJABBERD - Enable service
   systemd:
     enabled: yes
     name: ejabberd
   no_log: True

 - name: EJABBERD - Stop service
   systemd:
     name: ejabberd
     state: stopped
   no_log: True

 - name: EJABBERD - Delete /var/lib/ejabberd
   file:
     path: /var/lib/ejabberd
     state: absent
   no_log: True

 - name: EJABBERD - Create /var/lib/ejabberd
   file:
     path: /var/lib/ejabberd
     state: directory
     mode: '0755'
     owner: ejabberd
     group: ejabberd
   no_log: True

 - name: EJABBERD - Set home folder to /var/lib/ejabberd for ejabberd user
   shell: "usermod ejabberd -d /var/lib/ejabberd"
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: EJABBERD - Set XMPP domain in ejabberd.yml
   command: 'sed -i "/^hosts:$/{n;s/.*/\ \ - \"{{ XMPP_DOMAIN }}\"/}" /etc/ejabberd/ejabberd.yml'
   no_log: True

 - name: EJABBERD - Add root@{{ XMPP_DOMAIN }} as admin user in ejabberd.yml
   command: 'sed -i "/^acl:/a\ \ admin: \n \ \ \ user : \n \ \ \ \ \ - "root@{{ XMPP_DOMAIN }}"" /etc/ejabberd/ejabberd.yml'
   no_log: True

 - name: EJABBERD - Disable starttls in ejabberd.yml
   shell: 'sed -i "s/starttls: true/starttls: false/" /etc/ejabberd/ejabberd.yml'
   no_log: True

 - name: EJABBERD - Restart service
   systemd:
     name: ejabberd
     state: restarted
   no_log: True

 - name: EJABBERD - Pause for 5 seconds to build ejabberd domain
   pause:
     seconds: 5
   no_log: True

 - name: EJABBERD - Copy .erlang.cookie
   copy:
     src: /var/lib/ejabberd/.erlang.cookie
     dest: /root/.erlang.cookie
     remote_src: yes
     owner: root
     group: root
     mode: '400'
   no_log: True

 - name: EJABBERD - register root account
   command: "ejabberdctl register root {{ XMPP_DOMAIN }} {{ ROOT_PASSWORD }}"
   no_log: True

 - name: EJABBERD - Update ejabberd.yml
   shell: |
    sed -i 's/^##[[:space:]]registration_timeout:.*$/registration_timeout: infinity/' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*muc_create:/{n;s/allow:.*$/allow: admin/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*mod_muc:/{n;n;n;s/allow.*/allow: local/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*trusted_network:/{n;s/allow:.*$/allow: all/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*## mod_register:/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*ip_access: trusted_network/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i 's/max_stanza_size:.*$/max_stanza_size: 8388608/' /etc/ejabberd/ejabberd.yml
    sed -i 's/max_fsm_queue:.*$/max_fsm_queue: 10000/' /etc/ejabberd/ejabberd.yml
    sed -i 's/^[[:space:]]*normal:.*$/ normal: 100000000/' /etc/ejabberd/ejabberd.yml
    sed -i 's/^[[:space:]]*fast:.*$/ fast: 1000000000/' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*welcome_message:/{s/## //}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*subject:/{s/## //;s/subject:.*$/subject: ""/}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*subject.*/{s/## //;s/subject:.*$/subject: ""/}' /etc/ejabberd/ejabberd.yml
    sed -i  '/^[[:space:]]*body.*/{s/## //;s/body:.*$/body: ""/}' /etc/ejabberd/ejabberd.yml
    sed -i '/body: ""/ {n;N; s/^/    ##/gm }' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*certfile:/{s/## //;s///}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*##[[:space:]]*starttls:/{s/## //;s///}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*#certfile:/{s/#//;s///}' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*#starttls:/{s/#//;s///}' /etc/ejabberd/ejabberd.yml
    sed -i 's/mod_ping: {}/mod_ping:\n\ \ \ \ send_pings: true\n\ \ \ \ ping_interval: 60\n\ \ \ \ timeout_action: kill/' /etc/ejabberd/ejabberd.yml
    sed -i '/^[[:space:]]*## mod_admin_extra:/{s/## //}' /etc/ejabberd/ejabberd.yml
   no_log: True

 - name: EJABBERD - Restart service
   systemd:
     name: ejabberd
     state: restarted
   no_log: True

 - name: EJABBERD - Pause for 2 to 300 seconds to enable ejabberd start
   wait_for:
     port: 5222
     delay: 2
   no_log: True

##########################################################
#                    Install guacamole                   #
##########################################################

 - name: GUACAMOLE - Install guacamole
   yum:
     pkg:
       - guacamole
       - guacd
       - libguac-client-vnc
       - libguac-client-ssh
       - libguac-client-rdp
       - guacamole-auth-mysql
       - mysql-connector-java
     state: latest
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Define GUACAMOLE_HOME in tomcat
   lineinfile:
     dest: /etc/default/tomcat
     create: yes
     line: "{{ item }}"
   with_items:
     - '# Guacamole env variable'
     - 'GUACAMOLE_HOME=/etc/guacamole'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Enable tomcat
   systemd:
     enabled: yes
     state: restarted
     name: tomcat
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Enable guacd
   systemd:
     enabled: yes
     state: restarted
     name: guacd
   no_log: True

 - name: GUACAMOLE - Generate Guacamole password
   command: pwgen --secure 40 1
   register: guacamole_pass
   no_log: True

 - name: GUACAMOLE - Define GUACAMOLE_ROOT_PASSWORD variable
   set_fact:
     GUACAMOLE_ROOT_PASSWORD: "{{ guacamole_pass.stdout }}"
   no_log: True

 - name: GUACAMOLE - Reset guacamole database
   command: 'mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -e "{{ item }}"'
   with_items:
     - "DROP DATABASE IF EXISTS guacamole"
     - "DELETE FROM mysql.user WHERE user='guacamole'"
     - "FLUSH PRIVILEGES"
     - "CREATE DATABASE guacamole"
     - "CREATE USER 'guacamole'@'localhost' IDENTIFIED BY '{{ ROOT_PASSWORD }}'"
     - "GRANT SELECT,INSERT,UPDATE,DELETE ON guacamole.* TO 'guacamole'@'localhost'"
   no_log: True

 - name: GUACAMOLE - Import schemas
   shell: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole < {{ item }}"
   with_items:
     - /usr/share/guacamole-auth-jdbc/mysql/schema/001-create-schema.sql
     - /usr/share/guacamole-auth-jdbc/mysql/schema/002-create-admin-user.sql
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Define guacamole root user password in database
   command: "mysql -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} guacamole -e \"SET @salt = UNHEX(SHA2(UUID(), 256)); UPDATE guacamole_user SET username='root', password_salt=@salt, password_hash=UNHEX(SHA2(CONCAT('{{ GUACAMOLE_ROOT_PASSWORD }}', HEX(@salt)), 256)) WHERE user_id=1\""
   no_log: True

 - name: GUACAMOLE - Create /etc/guacamole/lib/
   file:
     path: /etc/guacamole/lib/
     state: directory
     mode: '0755'
     owner: root
     group: root
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Copy mysql-connector-java.jar to /etc/guacamole/lib/
   copy:
     src: /usr/share/java/mysql-connector-java.jar
     dest: /etc/guacamole/lib/
     remote_src: yes
     owner: root
     group: root
     mode: '644'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Configure guacamole.properties
   lineinfile:
     dest: /etc/guacamole/guacamole.properties
     regexp: "{{ item.regex }}"
     line: "{{ item.line }}"
     state: "{{ item.state }}"
   with_items:
     - { regex: '^basic-user-mapping.*$', line: '', state: 'absent' }
     - { regex: '^noauth-config:.*$', line: '', state: 'absent' }
     - { regex: '^mysql-disallow-simultaneous-connections:.*$', line: 'mysql-disallow-simultaneous-connections: false', state: 'present' }
     - { regex: '^mysql-disallow-duplicate-connections:.*$', line: 'mysql-disallow-duplicate-connections: false', state: 'present' }
     - { regex: '^lib-directory:.*$', line: 'lib-directory: /var/lib/guacamole/classpath', state: 'present' }
     - { regex: '^mysql-hostname:.*$', line: 'mysql-hostname: localhost', state: 'present' }
     - { regex: '^mysql-port:.*$', line: 'mysql-port: 3306', state: 'present' }
     - { regex: '^mysql-database:.*$', line: 'mysql-database: guacamole', state: 'present' }
     - { regex: '^mysql-username:.*$', line: 'mysql-username: guacamole', state: 'present' }
     - { regex: '^mysql-password:.*$', line: 'mysql-password: {{ ROOT_PASSWORD }}', state: 'present' }
   no_log: True

 - name: GUACAMOLE - Change tomcat port from 8080 to 8081
   command: sed -i 's/Connector port="8080"/Connector port="8081"/' /etc/tomcat/server.xml
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Remove RemoteAddrValve directive from Tomcat config
   command: sed -i '/RemoteAddrValve/d' /etc/tomcat/server.xml
   when:
     - INSTALL_TYPE != "p"
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Allow requests from IP_ADDRESS on pulsemain
   command: xmlstarlet ed --inplace -s "Server[@port='8005']/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@name='localhost']" -t elem -n 'Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="{{ IP_ADDRESS }}"' /etc/tomcat/server.xml
   when:
     - INSTALL_TYPE == "p"
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Allow requests from PULSEMAIN_IP on relay
   command: xmlstarlet ed --inplace -s "Server[@port='8005']/Service[@name='Catalina']/Engine[@name='Catalina']/Host[@name='localhost']" -t elem -n 'Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="{{ PULSEMAIN_IP }}"' /etc/tomcat/server.xml
   when:
     - INSTALL_TYPE != "p"
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Restart tomcat
   systemd:
     name: tomcat
     state: restarted
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: GUACAMOLE - Configure apache for pulsemain guacamole
   copy:
     content: |
        <Location /guacamole/>
            SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass http://{{ SERVER_FQDN }}:8081/guacamole/ max=20 flushpackets=on
            ProxyPassReverse http://{{ SERVER_FQDN }}:8081/guacamole/
        </Location>
        <Location /guacamole/websocket-tunnel>
            SetEnvIf Referer "^https?://{{ SERVER_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass ws://{{ SERVER_FQDN }}:8081/guacamole/websocket-tunnel
            ProxyPassReverse ws://{{ SERVER_FQDN }}:8081/guacamole/websocket-tunnel
        </Location>
        SetEnvIf Request_URI "^/guacamole/tunnel" dontlog
     dest: '{{ APACHE_CONF_PATH }}/guacamole.conf'
   when:
     - INSTALL_TYPE == "p"
   no_log: True

 - name: GUACAMOLE - Reload apache
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution == 'CentOS'
     - INSTALL_TYPE == "p"
   no_log: True

 - name: GUACAMOLE - Configure apache for pulsemain guacamole
   copy:
     content: |
        <Location /guacamole-{{ XMPP_DOMAIN }}/>
            SetEnvIf Referer "^https?://{{ PULSEMAIN_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass http://{{ XMPP_DOMAIN }}:8081/guacamole/ max=20 flushpackets=on
            ProxyPassReverse http://{{ XMPP_DOMAIN }}:8081/guacamole/
            ProxyPassReverseCookiePath /guacamole/ /guacamole-{{ XMPP_DOMAIN}}/
        </Location>
        <Location /guacamole-{{ XMPP_DOMAIN }}/websocket-tunnel>
            SetEnvIf Referer "^https?://{{ PULSEMAIN_FQDN }}/" GUACAMOLE_ALLOWED
            Order Deny,Allow
            Deny from all
            Allow from env=GUACAMOLE_ALLOWED
            ProxyPass ws://{{ XMPP_DOMAIN }}:8081/guacamole/websocket-tunnel
            ProxyPassReverse ws://{{ XMPP_DOMAIN }}:8081/guacamole/websocket-tunnel
            ProxyPassReverseCookiePath /guacamole/ /guacamole-{{XMPP_DOMAIN }}/
        </Location>
        SetEnvIf Request_URI "^/guacamole/tunnel" dontlog
     dest: '{{ APACHE_CONF_PATH }}/guacamole-{{ XMPP_DOMAIN }}.conf'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != "p"
   no_log: True

 - name: GUACAMOLE - Reload apache on pulsemain
   systemd:
     name: httpd
     state: reloaded
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == 'CentOS'
     - INSTALL_TYPE != "p"
   no_log: True

##########################################################
#                    Install syncthing                   #
##########################################################

 - name: SYNCTHING - Install syncthing
   yum:
     pkg:
       - syncthing
       - syncthingmanager
     state: latest
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: SYNCTHING - Install additional packages on pulsemain
   yum:
     pkg:
       - syncthing-tools
       - syncthing-systemd-addons
     state: latest
   when:
     - ansible_distribution == 'CentOS'
     - INSTALL_TYPE == "p"
   no_log: True

 - name: SYNCTHING - Reset syncthing
   file:
     path: '{{ item }}'
     state: absent
   with_items:
     - '/var/lib/syncthing/.config'
     - '/var/lib/syncthing/Sync'
     - '/var/lib/syncthing-depl/.config'
     - '/var/lib/syncthing-depl/Sync'
   no_log: True

 - name: SYNCTHING - Create user accounts
   user:
     name: '{{ item.name }}'
     state: present
     createhome: yes
     home: '{{ item.home }}'
     shell: /sbin/nologin
     system: yes
   with_items:
     - { name: 'syncthing', home: '/var/lib/syncthing' }
     - { name: 'syncthing-depl', home: '/var/lib/syncthing-depl' }
   no_log: True

 - name: SYNCTHING - Create log file
   file:
     path: /var/log/syncthing.log
     mode: 0666
     state: touch
   no_log: True

 - name: SYNCTHING - Separate syncthing logs
   lineinfile:
     dest: "/usr/lib/systemd/system/syncthing@.service"
     regexp: "{{ item.regex }}"
     line: "{{ item.line }}"
     insertafter: "{{ item.insertafter }}"
   with_items:
     - { regex: '^ExecStart=/usr/bin/syncthing .*$', line: 'ExecStart=/usr/bin/syncthing -no-browser -logflags=3 -logfile /var/log/syncthing.log', insertafter: '' }
     - { regex: '^StandardOutput=.*$', line: 'StandardOutput=null', insertafter: '^Restart=.*$' }
     - { regex: '^StandardError=.*$', line: 'StandardError=null', insertafter: 'StandardOutput=null' }
   no_log: True

 - name: SYNCTHING - Setup rotation of syncthing logs
   copy:
     content: |
       /var/log/syncthing.log
       {
           missingok
           daily
           rotate 7
           notifempty
           create 0644 root root
           compress
       }
     dest: '/etc/logrotate.d/syncthing'
   no_log: True

 - name: SYNCTHING - Enable services
   systemd:
     enabled: yes
     daemon_reload: yes
     state: restarted
     name: 'syncthing@{{ item }}.service'
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SYNCTHING - Pause for up to 300 seconds to enable syncthing start
   wait_for:
     path: /var/lib/syncthing/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Pause for up to 300 seconds to enable syncthing-depl start
   wait_for:
     path: /var/lib/syncthing-depl/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Create backups of syncthing configure
   copy:
     src: '/var/lib/{{ item }}/.config/syncthing/config.xml'
     dest: '/var/lib/{{ item }}/.config/syncthing/config.xml.orig'
     remote_src: yes
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SYNCTHING - Get local device id for syncthing
   command: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   register: localdeviceid
   no_log: True

 - name: SYNCTHING - Set LOCAL_DEVICE_ID for syncthing
   set_fact:
     LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"
   no_log: True

 - name: SYNCTHING - Setup local apache for syncthing
   copy:
     content: |
       ProxyPass /syncthing/ http://localhost:8384/
       <Location /syncthing/>
           ProxyPassReverse http://localhost:8384/
           Require all granted
       </Location>
     dest: '{{ APACHE_CONF_PATH }}/syncthing.conf'
   no_log: True

 - name: SYNCTHING - Reload apache
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: SYNCTHING - Setup pulsemain apache for relay syncthing
   copy:
     content: |
       ProxyPass /syncthing-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing/
       <Location /syncthing-{{ XMPP_DOMAIN }}/>
           ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing/
           Require all granted
       </Location>
     dest: '{{ APACHE_CONF_PATH }}/syncthing-{{ XMPP_DOMAIN }}.conf'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Reload apache on pulsemain
   systemd:
     name: httpd
     state: reloaded
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: SYNCTHING - Find pulsemain device id
   command: syncthing -home=/var/lib/syncthing/.config/syncthing/ -device-id
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: resid
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ resid.stdout }}'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Set DISCOSRV_DEVICE_ID to PULSEMAIN_DEVICE_ID on relay
   set_fact:
     DISCOSRV_DEVICE_ID: '{{ PULSEMAIN_DEVICE_ID }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Stop service for editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SYNCTHING - Stop service for editing configuration on pulsemain
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Define global announce server as pulsemain on relay syncthing
   command: 'xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://{{ PULSEMAIN_FQDN }}:8443/?id={{ DISCOSRV_DEVICE_ID }}" /var/lib/syncthing/.config/syncthing/config.xml'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Update syncthing parameters to disallow external connections
   command: xmlstarlet ed --inplace -u "configuration/options/{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { field: 'relaysEnabled', value: 'false' }
     - { field: 'localAnnounceEnabled', value: 'false' }
     - { field: 'urAccepted', value: '-1' }
     - { field: 'autoUpgradeIntervalH', value: '0' }
   no_log: True

 - name: SYNCTHING - Add root user
   command: xmlstarlet ed --inplace -s "configuration/gui" -t elem -n user -v root /var/lib/syncthing/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Generate Syncthing root user hash
   shell: "htpasswd -bnBC 10 '' {{ ROOT_PASSWORD }} | tr -d ':\n' | sed 's/$2y/$2a/'"
   register: syncthing_pass
   no_log: True

 - name: SYNCTHING - Define ENCRYPTED_PASS
   set_fact:
     ENCRYPTED_PASS: "{{ syncthing_pass.stdout }}"
   no_log: True

 - name: SYNCTHING - Set root password to ENCRYPTED_PASS
   command: xmlstarlet ed --inplace -s "configuration/gui" -t elem -n password -v {{ ENCRYPTED_PASS }} /var/lib/syncthing/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Get api key from syncthing
   command: xmlstarlet sel -t -v "configuration/gui/apikey" /var/lib/syncthing/.config/syncthing/config.xml
   register: apikey

 - name: SYNCTHING - Set API_KEY
   set_fact:
     API_KEY: "{{ apikey.stdout }}"

 - name: SYNCTHING - Configure API_KEY in stman
   command: 'stman configure -k {{ API_KEY }}'

 - name: SYNCTHING - Define XMPP_DOMAIN for device name
   command: xmlstarlet ed --inplace -u "configuration/device[@id='{{ LOCAL_DEVICE_ID }}']/@name" -v "{{ XMPP_DOMAIN }}" /var/lib/syncthing/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Delete the default share
   command: xmlstarlet ed --inplace -d "configuration/folder[@label='Default Folder']" /var/lib/syncthing/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Delete pulsemain device on relay syncthing
   command: xmlstarlet ed --inplace -d "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Add pulsemain device as introducer on relay syncthing
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ PULSEMAIN_DEVICE_ID }}' name='pulse' introducer='true'" /var/lib/syncthing/.config/syncthing/config.xml
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Edit pulsemain device on relay syncthing
   command: xmlstarlet ed --inplace -s "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']" -t elem -n "{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { field: 'autoAcceptFolders', value: 'false' }
     - { field: 'address', value: 'tcp://{{ PULSEMAIN_IP }}:22000' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Delete relayserver device from pulsemain syncthing
   command: xmlstarlet ed --inplace -d "configuration/device[@name='{{ XMPP_DOMAIN }}']" /var/lib/syncthing/.config/syncthing/config.xml
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   ignore_errors: yes
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Add relayserver device to pulsemain syncthing
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ LOCAL_DEVICE_ID }}' name='{{ XMPP_DOMAIN }}' introducer='false'" /var/lib/syncthing/.config/syncthing/config.xml
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Edit relayserver device on pulsemain syncthing
   command: xmlstarlet ed --inplace -s "configuration/device[@id='{{ LOCAL_DEVICE_ID }}']" -t elem -n "{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { field: 'address', value: 'tcp://{{ IP_ADDRESS }}:22000' }
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Restart service after editing configuration on pulsemain
   systemd:
     name: syncthing@syncthing
     state: restarted
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Restart service after editing configuration
   systemd:
     name: syncthing@syncthing
     state: restarted
   no_log: True

 - name: SYNCTHING - Pause for 5 to 300 seconds to enable syncthing start
   wait_for:
     port: 22000
     delay: 5
   no_log: True


##########################################################
#               Syncthing share packages                 #
##########################################################

 - name: SHARE - Stop service for editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SHARE - Stop service on pulsemain for editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Get information about packages folder
   stat:
     path: /var/lib/pulse2/packages
   register: packagesfolder

 - name: SHARE - Delete packages folder if it is not a link
   file:
     state: absent
     path: /var/lib/pulse2/packages
   when: packagesfolder.stat is defined and packagesfolder.stat.islnk is not defined
   no_log: True

 - name: SHARE - Create symbolic link in /var/lib/pulse2/packages
   file:
     src: /telediffusion/4
     dest: /var/lib/pulse2/packages
     owner: syncthing
     group: syncthing
     state: link
     force: yes
   no_log: True

 - name: SHARE - Create folder named after the UCANSS number on pulsemain
   file:
     path: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/'
     state: directory
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Check if UCANSS share exists on pulsemain
   command: xmlstarlet sel -t -v "/configuration/folder[@id=\"pulsemaster_{{ ansible_hostname[:6] }}\"]/@id" -n /var/lib/syncthing/.config/syncthing/config.xml
   register: shareexists
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Create UCANSS share on pulsemain if it did not exist
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n 'folder id="pulsemaster_{{ ansible_hostname[:6] }}" label="{{ ansible_hostname[:6] }}" path="/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}" type="sendonly" rescanIntervalS="3600" fsWatcherEnabled="true" fsWatcherDelayS="10" autoNormalize="true"' /var/lib/syncthing/.config/syncthing/config.xml
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
     - shareexists.stdout == ''
   no_log: True

 - name: SHARE - Edit UCANSS share on pulsemain if it did not exist
   command: xmlstarlet ed --inplace {{ item.type }} "{{ item.element }}" {{ item.operation }} /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { type: "-s", element: "configuration/folder[@id='pulsemaster_{{ ansible_hostname[:6] }}']", operation: "-t elem -n 'device id=\"{{ PULSEMAIN_DEVICE_ID }}\"'" }
     - { type: "-s", element: "configuration/folder[@id='pulsemaster_{{ ansible_hostname[:6] }}']", operation: "-t elem -n 'markerName' -v '.stfolder'" }
     - { type: "-s", element: "configuration/folder[@id='pulsemaster_{{ ansible_hostname[:6] }}']", operation: "-t elem -n 'minDiskFree unit=\"%\"'" }
     - { type: "-u", element: "configuration/folder[@id='pulsemaster_{{ ansible_hostname[:6] }}']/minDiskFree", operation: "-v '1'" }
   when:
     - INSTALL_TYPE != 'p'
     - shareexists.stdout == ''
   no_log: True

 - name: SHARE - Create UCANSS share in database if it did not exist
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s pkgs -e \"INSERT INTO pkgs_shares (name, comments, type, uri, ars_name, ars_id, share_path) VALUES ({{ ansible_hostname[:6] }}, '{{ ansible_hostname[:6] }}', 'local', 'pulse', 'pulse', 1, '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}')\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
     - shareexists.stdout == ''
   no_log: True

 - name: SHARE - Get id from pkgs_shares for the previous insert if it did not exist
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s pkgs -e \"SELECT id FROM pkgs_shares WHERE name='{{ ansible_hostname[:6] }}' AND type='local' AND ars_id=1 AND share_path='/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}'\""
   register: shareid
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
     - shareexists.stdout == ''
   no_log: True

 - name: SHARE - Create permissions on UCANSS share in database
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s pkgs -e \"INSERT INTO pkgs_rules_local (pkgs_rules_algos_id, `order`, subject, pkgs_shares_id) VALUES (1, 10, '^{{ ansible_hostname[:6] }}.*', {{ shareid.stdout }})\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
     - shareexists.stdout == ''
   no_log: True

 - name: SHARE - Delete all shares on ars
   command: xmlstarlet ed --inplace -d "configuration/folder[@id='{{ item.share_id }}']" /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { share_id: 'pulsemaster_packages', syncthing_folder: 'packages', destination: '/telediffusion/4/' }
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   ignore_errors: yes
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Unshare all folders from main pulse if already shared
   command: xmlstarlet ed --inplace -d "configuration/folder[@type='sendonly']/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing/.config/syncthing/config.xml
   ignore_errors: yes
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Remove destination folders if present
   file:
     path: '{{ item.destination }}'
     state: absent
   with_items:
     - { share_id: 'pulsemaster_packages', syncthing_folder: 'packages', destination: '/telediffusion/4/' }
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: Capture folders to delete in syncthing on relays
   find:
     paths: /var/lib/syncthing/
     file_type: directory
     patterns: '/var/lib/syncthing/\d{6}$'
     use_regex: yes
   register: folderstodelete
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: Delete folders in syncthing on relays
   file:
     path: "{{ item.path }}"
     state: absent
   with_items: "{{ folderstodelete['files'] }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Delete unused shares on ars
   command: xmlstarlet ed --inplace -d "configuration/folder[@destination='{{ item.path | replace('/var/lib/syncthing', '~') }}']" /var/lib/syncthing/.config/syncthing/config.xml
   with_items: "{{ folderstodelete['files'] }}"
   ignore_errors: yes
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Create destination folders
   file:
     path: '{{ item.destination }}'
     state: directory
   with_items:
     - { share_id: 'pulsemaster_packages', syncthing_folder: 'packages', destination: '/telediffusion/4/' }
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Create syncthing special folder
   file:
     path: '{{ item.destination }}/.stfolder/'
     state: directory
     mode: '0755'
     owner: syncthing
     group: syncthing
   with_items:
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Create stignore file for downloads on relay
   copy:
     content: "reversessh"
     dest: /var/lib/pulse2/clients/.stignore
     mode: '0644'
     owner: syncthing
     group: syncthing
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Define ACLs on the folders with inheritance
   acl:
     path: '{{ item.destination }}'
     etype: group
     entity: syncthing
     recursive: yes
     permissions: rwx
     default: yes
     state: present
   with_items:
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Define ACLs on the folders
   acl:
     path: '{{ item.destination }}'
     etype: group
     entity: syncthing
     recursive: yes
     permissions: rwx
     default: no
     state: present
   with_items:
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Create shares on relay
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n 'folder id="{{ item.share_id }}" label="{{ item.syncthing_folder }}" path="{{ item.destination }}" type="sendreceive" rescanIntervalS="3600" fsWatcherEnabled="true" fsWatcherDelayS="10" autoNormalize="true"' /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Edit shares on relay
   command: xmlstarlet ed --inplace {{ item.type }} "{{ item.element }}" {{ item.operation }} /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { type: "-s", element: "configuration/folder[@type='sendreceive']", operation: "-t elem -n 'device id=\"{{ PULSEMAIN_DEVICE_ID }}\"'" }
     - { type: "-s", element: "configuration/folder[@type='sendreceive']", operation: "-t elem -n 'device id=\"{{ LOCAL_DEVICE_ID }}\"'" }
     - { type: "-s", element: "configuration/folder[@type='sendreceive']", operation: "-t elem -n 'markerName' -v '.stfolder'" }
     - { type: "-s", element: "configuration/folder[@type='sendreceive']", operation: "-t elem -n 'minDiskFree unit=\"%\"'" }
     - { type: "-u", element: "configuration/folder[@type='sendreceive']/minDiskFree", operation: "-v '1'" }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Share all folders with ars from pulsemain
   command: xmlstarlet ed --inplace -s "configuration/folder[@id='{{ item.share_id }}']" -t elem -n 'device id="{{ LOCAL_DEVICE_ID }}"' /var/lib/syncthing/.config/syncthing/config.xml
   with_items:
     - { share_id: 'pulsemaster_downloads', syncthing_folder: 'downloads', destination: '/var/lib/pulse2/clients/' }
     - { share_id: 'pulsemaster_bootmenus', syncthing_folder: 'bootmenus', destination: '/var/lib/pulse2/imaging/bootmenus/' }
     - { share_id: 'pulsemaster_baseremoteagent', syncthing_folder: 'baseremoteagent', destination: '/var/lib/pulse2/xmpp_baseremoteagent/' }
     - { share_id: 'pulsemaster_global', syncthing_folder: 'global', destination: '/var/lib/pulse2/packages/sharing/global/' }
     - { share_id: 'pulsemaster_{{ ansible_hostname[:6] }}', syncthing_folder: '{{ ansible_hostname[:6] }}', destination: '/var/lib/pulse2/packages/sharing/{{ ansible_hostname[:6] }}/' }
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Restart service on pulsemain after editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: restarted
   with_items:
     - syncthing
     - syncthing-depl
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SHARE - Restart service after editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: restarted
   with_items:
     - syncthing
     - syncthing-depl
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Pause for 5 to 300 seconds to enable syncthing start
   wait_for:
     port: 22000
     delay: 5
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

##########################################################
#                 Syncthing deployment                   #
##########################################################

 - name: SYNCTHINGDEPL - Get local device id for syncthing-depl
   command: syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id
   register: localdeviceid
   no_log: True

 - name: SYNCTHINGDEPL - Set LOCAL_DEVICE_ID for syncthing-depl
   set_fact:
     LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"
   no_log: True

 - name: SYNCTHINGDEPL - Setup local apache for syncthing-depl
   copy:
     content: |
       ProxyPass /syncthing-depl/ http://localhost:8385/
       <Location /syncthing-depl/>
           ProxyPassReverse http://localhost:8385/
           Require all granted
       </Location>
     dest: '{{ APACHE_CONF_PATH }}/syncthing-depl.conf'
   no_log: True

 - name: SYNCTHINGDEPL - Reload apache
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: SYNCTHINGDEPL - Setup pulsemain apache for relay syncthing-depl
   copy:
     content: |
       ProxyPass /syncthing-depl-{{ XMPP_DOMAIN }}/ http://{{ XMPP_DOMAIN }}/syncthing-depl/
       <Location /syncthing-depl-{{ XMPP_DOMAIN }}/>
           ProxyPassReverse http://{{ XMPP_DOMAIN }}/syncthing-depl/
           Require all granted
       </Location>
     dest: '{{ APACHE_CONF_PATH }}/syncthing-depl-{{ XMPP_DOMAIN }}.conf'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Reload apache on pulsemain
   systemd:
     name: httpd
     state: reloaded
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: SYNCTHINGDEPL - Find pulsemain device id
   command: syncthing -home=/var/lib/syncthing-depl/.config/syncthing/ -device-id
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: resid
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Set PULSEMAIN_DEVICE_ID
   set_fact:
     PULSEMAIN_DEVICE_ID: '{{ resid.stdout }}'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Stop service for editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SYNCTHINGDEPL - Stop service for editing configuration on pulsemain
   systemd:
     name: syncthing@{{ item }}
     state: stopped
   with_items:
     - syncthing
     - syncthing-depl
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Define global announce server as pulsemain on relay syncthing-depl
   command: 'xmlstarlet ed --inplace -u "configuration/options/globalAnnounceServer" -v "https://{{ PULSEMAIN_FQDN }}:8443/?id={{ DISCOSRV_DEVICE_ID }}" /var/lib/syncthing-depl/.config/syncthing/config.xml'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Update syncthing parameters to disallow external connections
   command: xmlstarlet ed --inplace -u "configuration/options/{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing-depl/.config/syncthing/config.xml
   with_items:
     - { field: 'relaysEnabled', value: 'false' }
     - { field: 'localAnnounceEnabled', value: 'false' }
     - { field: 'urAccepted', value: '-1' }
     - { field: 'autoUpgradeIntervalH', value: '0' }
   no_log: True

 - name: SYNCTHINGDEPL - Add root user
   command: 'xmlstarlet ed --inplace -s "configuration/gui" -t elem -n user -v root /var/lib/syncthing-depl/.config/syncthing/config.xml'
   no_log: True

 - name: SYNCTHINGDEPL - Set root password to ENCRYPTED_PASS
   command: xmlstarlet ed --inplace -s "configuration/gui" -t elem -n password -v {{ ENCRYPTED_PASS }} /var/lib/syncthing-depl/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHINGDEPL - Define listen port to 23000
   command: 'xmlstarlet ed --inplace -u "configuration/options/listenAddress" -v "tcp://0.0.0.0:23000" /var/lib/syncthing-depl/.config/syncthing/config.xml'
   no_log: True

 - name: SYNCTHINGDEPL - Define gui listen port to 8385
   command: 'xmlstarlet ed --inplace -u "configuration/gui/address" -v "127.0.0.1:8385" /var/lib/syncthing-depl/.config/syncthing/config.xml'
   no_log: True

 - name: SYNCTHINGDEPL - Get api key from syncthing-depl
   command: xmlstarlet sel -t -v "configuration/gui/apikey" /var/lib/syncthing-depl/.config/syncthing/config.xml
   register: apikey
   no_log: True

 - name: SYNCTHINGDEPL - Set API_KEY
   set_fact:
     API_KEY: "{{ apikey.stdout }}"
   no_log: True

 - name: SYNCTHINGDEPL - Configure API_KEY in stman
   command: "stman configure -k {{ API_KEY }} -p 8385 -n depl"

 - name: SYNCTHINGDEPL - Define XMPP_DOMAIN for device name
   command: xmlstarlet ed --inplace -u "configuration/device[@id='{{ LOCAL_DEVICE_ID }}']/@name" -v "{{ XMPP_DOMAIN }}" /var/lib/syncthing-depl/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHINGDEPL - Delete the default share
   command: xmlstarlet ed --inplace -d "configuration/folder[@label='Default Folder']" /var/lib/syncthing-depl/.config/syncthing/config.xml
   no_log: True

 - name: SYNCTHING - Delete relayserver device on pulsemain syncthing-depl
   command: xmlstarlet ed --inplace -d "configuration/device[@id='{{ LOCAL_DEVICE_ID }}']" /var/lib/syncthing-depl/.config/syncthing/config.xml
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Add relayserver device as introducer on pulsemain syncthing-depl
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ LOCAL_DEVICE_ID }}' name='{{ XMPP_DOMAIN }}' introducer='true'" /var/lib/syncthing-depl/.config/syncthing/config.xml
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Edit relayserver device on pulsemain syncthing-depl
   command: xmlstarlet ed --inplace -s "configuration/device[@id='{{ LOCAL_DEVICE_ID }}']" -t elem -n "{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing-depl/.config/syncthing/config.xml
   with_items:
     - { field: 'address', value: 'tcp://{{ IP_ADDRESS }}:23000' }
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHING - Delete pulsemain device on relay syncthing-depl
   command: xmlstarlet ed --inplace -d "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']" /var/lib/syncthing-depl/.config/syncthing/config.xml
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Add pulsemain device as introducer on relay syncthing-depl
   command: xmlstarlet ed --inplace -s "configuration" -t elem -n "device id='{{ PULSEMAIN_DEVICE_ID }}' name='pulse' introducer='true'" /var/lib/syncthing-depl/.config/syncthing/config.xml
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Edit pulsemain device on relay syncthing-depl
   command: xmlstarlet ed --inplace -s "configuration/device[@id='{{ PULSEMAIN_DEVICE_ID }}']" -t elem -n "{{ item.field }}" -v "{{ item.value }}" /var/lib/syncthing-depl/.config/syncthing/config.xml
   with_items:
     - { field: 'autoAcceptFolders', value: 'true' }
     - { field: 'address', value: 'tcp://{{ PULSEMAIN_IP }}:23000' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Restart service after editing configuration on pulsemain
   systemd:
     name: syncthing@{{ item }}
     state: restarted
   with_items:
     - syncthing
     - syncthing-depl
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: SYNCTHINGDEPL - Restart service after editing configuration
   systemd:
     name: syncthing@{{ item }}
     state: restarted
   with_items:
     - syncthing
     - syncthing-depl
   no_log: True

 - name: SYNCTHINGDEPL - Pause for 5 to 300 seconds to enable syncthing start
   wait_for:
     port: 23000
     delay: 5
   no_log: True

 - name: SYNCTHINGDEPL - Update relay config with apikey and device id
   command: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local syncthing-deploy {{ item.parameter }} {{ item.value }}
   with_items:
     - { parameter: 'syncthing_gui_apikey', value: '"{{ API_KEY }}"'}
     - { parameter: 'syncthing_device_id', value: '"{{ LOCAL_DEVICE_ID }}"'}
   no_log: True


##########################################################
#                   SSH server setup                     #
##########################################################

 - name: SSH - Setup alternate SSH port if defined
   lineinfile:
     dest: /etc/ssh/sshd_config
     regexp: "{{ item.regex }}"
     line: "{{ item.line }}"
     insertafter: "{{ item.insertafter }}"
   with_items:
     - { regex: '^#?\s*Port 22$', line: 'Port 22', insertafter: '' }
     - { regex: "^Port {{ REVERSE_SSH_PORT }}$", line: "Port {{ REVERSE_SSH_PORT }}", insertafter: 'Port 22' }
     - { regex: '^#?\s*GatewayPorts .*$', line: 'GatewayPorts yes', insertafter: '' }
   when:
     - REVERSE_SSH_PORT != ''
   no_log: True

 - name: SSH - Setup GatewayPorts
   lineinfile:
     dest: /etc/ssh/sshd_config
     regexp: '^#?\s*GatewayPorts .*$'
     line: 'GatewayPorts yes'
   no_log: True

 - name: SSH - Restart SSH server
   service:
     name: sshd
     state: restarted
   when:
     - ansible_distribution == 'CentOS'
   no_log: True

##########################################################
#                  Relay server setup                    #
##########################################################

 - name: RELAY - Get current plugins list from pulsemain
   command: crudini --get /etc/pulse-xmpp-agent/relayconf.ini.local plugin pluginlist
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: plugin_list
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Get connection password from pulsemain
   shell: 'crudini --get /etc/pulse-xmpp-agent/relayconf.ini.local connection password'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: connection_pass
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Register master account
   command: "ejabberdctl register master {{ XMPP_DOMAIN }} {{ connection_pass.stdout }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Configure relay server
   command: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local {{ item.section }} {{ item.parameter }} {{ item.value }}
   with_items:
     - { section: 'plugin', parameter: 'pluginlist', value: '"{{ plugin_list.stdout }}"'}
     - { section: 'connection', parameter: 'password', value: '"{{ connection_pass.stdout }}"'}
     - { section: 'connection', parameter: 'server', value: '{{ IP_ADDRESS }}'}
     - { section: 'type', parameter: 'guacamole_baseurl', value: '"http://{{ PULSEMAIN_FQDN }}/guacamole-{{ XMPP_DOMAIN }}/#/client/@@CUX_ID@@?username=root&password={{ GUACAMOLE_ROOT_PASSWORD }}"'}
     - { section: 'chat', parameter: 'domain', value: '{{ XMPP_DOMAIN }}'}
     - { section: 'jid_01', parameter: 'jidname', value: '"RS{{ XMPP_DOMAIN }}@{{ XMPP_DOMAIN }}/pulse01a"'}
     - { section: 'global', parameter: 'allow_order', value: 'master_reg'}
     - { section: 'type', parameter: 'geolocalisation', value: 'False'}
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Configure relay server public IP if defined
   command: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local type {{ item.parameter }} {{ item.value }}
   with_items:
     - { parameter: 'request_type', value: 'public'}
     - { parameter: 'public_ip', value: '{{ PUBLIC_IP }}'}
   when:
     - PUBLIC_IP != ''
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Add gucamoleconf to list of plugins
   command: "crudini --set --list /etc/pulse-xmpp-agent/relayconf.ini.local plugin pluginlist guacamoleconf"
   no_log: True

 - name: RELAY - Configure guacamoleconf plugin
   command: "crudini --set /etc/pulse-xmpp-agent/guacamoleconf.ini.local parameters guacamole_dbpasswd {{ ROOT_PASSWORD }}"
   no_log: True

 - name: RELAY - Fetch plugin ini files from pulsemain
   fetch:
     src: "/etc/pulse-xmpp-agent/{{ item }}.ini.local"
     dest: "/tmp/{{ ansible_hostname }}-{{ item }}.ini.local"
     flat: yes
   with_items:
     - applicationdeploymentjson
     - downloadfileexpert
     - downloadfile
     - guacamole
     - reverse_ssh_on
     - manage_scheduler_relay
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   ignore_errors: yes
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Copy plugin ini files to relay
   copy:
     src: "/tmp/{{ ansible_hostname }}-{{ item }}.ini.local"
     dest: "/etc/pulse-xmpp-agent/{{ item }}.ini.local"
     owner: root
     group: root
     mode: '644'
   with_items:
     - applicationdeploymentjson
     - downloadfileexpert
     - downloadfile
     - guacamole
     - reverse_ssh_on
     - manage_scheduler_relay
   ignore_errors: yes
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Enable package watching service
   systemd:
     enabled: yes
     state: restarted
     name: pulse-package-watching
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Delete lines from /etc/hosts
   lineinfile:
     dest: "/etc/hosts"
     regexp: "{{ item }}"
     state: absent
   with_items:
     - '^.* pulse$'
     - '^.* {{ XMPP_DOMAIN }}$'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Update /etc/hosts
   lineinfile:
     line: "{{ item.line }}"
     dest: "/etc/hosts"
     regexp: "{{ item.regex }}"
   with_items:
     - { regex: '^.* pulse$', line: '{{ PULSEMAIN_IP }} pulse' }
     - { regex: '^.* {{ XMPP_DOMAIN }}$', line: '{{ IP_ADDRESS }} {{ XMPP_DOMAIN }}' }
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Update /etc/hosts on pulsemain
   lineinfile:
     line: '{{ IP_REMOTE_SERVER }} {{ XMPP_DOMAIN }}'
     dest: /etc/hosts
     regexp: '^.* {{ XMPP_DOMAIN }}$'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Force relay to re-register in case of upgrade
   copy:
     content: ""
     dest: /usr/lib/python2.7/site-packages/pulse_xmpp_agent/BOOLFILECOMPLETREGISTRATION
     force: no
   when:
     - INSTALL_TYPE != 'p'
     - ansible_distribution == 'CentOS'
   no_log: True

 - name: RELAY - Enable service
   systemd:
     enabled: yes
     state: restarted
     name: pulse-xmpp-agent-relay
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Get cluster id for relay if it exists
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster -e \"SELECT id from cluster_ars where name='{{ CLUSTER_NAME }}'\""
   register: existingclusterid
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Set CLUSTER_ID if cluster already exists
   set_fact:
     CLUSTER_ID: "{{ existingclusterid.stdout }}"
   when:
     - INSTALL_TYPE != 'p'
     - existingclusterid.stdout != ''
   no_log: True

 - name: RELAY - Get MAX_ID FROM cluster_ars when cluster does not exist
   command: 'mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster -e "SELECT MAX(id) FROM cluster_ars"'
   register: maxid
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
     - existingclusterid.stdout == ''
   no_log: True

 - name: RELAY - Set CLUSTER_ID
   set_fact:
     CLUSTER_ID: "{{ maxid.stdout | int + 1 }}"
   when:
     - INSTALL_TYPE != 'p'
     - existingclusterid.stdout == ''
   no_log: True

 - name: RELAY - Create cluster if it does not exist
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster -e \"INSERT INTO cluster_ars (id,name,description) VALUES ({{ CLUSTER_ID }},'{{ CLUSTER_NAME }}','{{ CLUSTER_DESCRIPTION }}')\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - existingclusterid.stdout == ''
   no_log: True

 - name: RELAY - Create pkgs rule on cluster
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s pkgs -e \"INSERT INTO pkgs_rules_global (pkgs_rules_algos_id, pkgs_cluster_ars_id, subject, permission) VALUES (3, {{ CLUSTER_ID }}, '^{{ ansible_hostname[:6] }}.*', 'rw')\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - existingclusterid.stdout == ''
   no_log: True

 - name: RELAY - Get MAX_ID FROM has_cluster_ars
   command: 'mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster -e "SELECT MAX(id) FROM has_cluster_ars"'
   register: maxid
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Set NEXT_ID
   set_fact:
     NEXT_ID: "{{ maxid.stdout | int + 1 }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Get RELAYSERVER_ID FROM relayserver waiting up to 5 minutes
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} -s xmppmaster -e \"SELECT id FROM relayserver WHERE nameserver='{{ XMPP_DOMAIN }}'\""
   register: relayserverid
   until: relayserverid.stdout != ''
   retries: 10
   delay: 30
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Set RELAYSERVER_ID
   set_fact:
     RELAYSERVER_ID: "{{ relayserverid.stdout }}"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Relay check if id_ars is already inserted
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster -Ns -e \"SELECT COUNT(has_cluster_ars.id_ars) as nb_ars from has_cluster_ars where has_cluster_ars.id_ars = '{{ RELAYSERVER_ID }}'\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   register: relay_is_inserted
   no_log: True

 - name: RELAY - Insert relay in its cluster
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster -e \"INSERT INTO has_cluster_ars (id,id_ars,id_cluster) VALUES ('{{ NEXT_ID }}','{{ RELAYSERVER_ID }}','{{ CLUSTER_ID }}')\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - relay_is_inserted.stdout == "0"
   no_log: True

 - name: RELAY - Insert relay in its cluster
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster -e \"UPDATE has_cluster_ars SET id_cluster = '{{ CLUSTER_ID }}' WHERE id_ars = '{{ RELAYSERVER_ID }}'\""
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - relay_is_inserted.stdout != "0"
   no_log: True

 - name: RELAY - Create substituteconf records
   command: "mysql -h {{ DBHOST }} -P {{ DBPORT }} -u{{ DBADMINUSER }} -p{{ DBADMINPASSWD }} xmppmaster -e \"INSERT INTO xmppmaster.substituteconf (type,jidsubtitute,relayserver_id) VALUES ('{{ item.type }}','{{ item.jid }}','{{ RELAYSERVER_ID }}')\""
   with_items:
     - { type: 'assessor', jid: 'master_asse@pulse' }
     - { type: 'subscription', jid: 'master_subs@pulse' }
     - { type: 'registration', jid: 'master_reg@pulse' }
     - { type: 'inventory', jid: 'master_inv@pulse' }
     - { type: 'logger', jid: 'master_log@pulse' }
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Enable autoupdatebyrelay on pulsemain
   command: "{{ item }}"
   with_items:
     - 'crudini --set /etc/pulse-xmpp-agent-substitute/loadautoupdate.ini parameters autoupdatebyrelay True'
     - 'crudini --set /etc/mmc/plugins/xmppmaster.ini.local global autoupdatebyrelay True'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Enable publishing of agent updates on relay
   copy:
     content: |
        Alias /downloads /var/lib/pulse2/clients/
        <Directory /var/lib/pulse2/clients/>
          Options +Indexes
          IndexOptions FancyIndexing VersionSort SuppressDescription FoldersFirst XHTML HTMLTable NameWidth=* IgnoreCase SuppressRules IconHeight=16 IconWidth=16
          IndexOrderDefault Descending Date
          IndexIgnore agent config templates vpn *.conf *.in generate* create-repos.sh artwork libs *.nsi *.sfx *.7z *.ini *.xml .??* *~ *# *.css *.html *.plist rbash runpulseagent *.buildinfo *.dsc *.changes pulse-agent-linux package Pulse2AgentsInstaller.tar pulse-service.* create-profile.ps1
          AddIcon /downloads/win/artwork/install.ico Pulse-Agent-windows-FULL-latest.exe Pulse-Agent-windows-MINIMAL-latest.exe Pulse-Agent-mac-MINIMAL-latest.pkg.tar.gz Pulse-Agent-linux-MINIMAL-latest.sh
          HeaderName "/downloads/HEADER.html"
          IndexStyleSheet "/downloads/style.css"
          AllowOverride None
          Require all granted
        </Directory>
     dest: '{{ APACHE_CONF_PATH }}/pulse.conf'
   when:
     - INSTALL_TYPE != "p"
   no_log: True

 - name: RELAY - Reload apache
   systemd:
     name: httpd
     state: reloaded
   when:
     - ansible_distribution == 'CentOS'
     - INSTALL_TYPE != "p"
   no_log: True

 - name: RELAY - Add relay root public key to pulsetransfert authorized keys on pulsemain
   authorized_key:
     user: root
     state: present
     key: "{{ sshkey.ssh_public_key }}"
     path: /var/lib/pulse2/file-transfer/.ssh/authorized_keys
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: RELAY - Disable Quick deploy
   blockinfile:
     dest: /etc/pulse-xmpp-agent/relayconf.ini.local
     block: |
       [quick_deploy]
       max_size_stanza_xmpp = 0
     state: present
   no_log: True

##########################################################
#                Certificate Generation                  #
##########################################################

 - name: Remove relay from certificat trust, we will redo it.
   lineinfile:
     dest: /var/lib/pulse2/pki/index.txt
     state: absent
     regexp: '{{ SERVER_FQDN }}$'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CERTS - Create the certificates on pulsemain
   shell: "{{ item }}"
   with_items:
     - 'crudini --set /var/lib/pulse2/pki/conf/pulse.cnf alt_names DNS.1 {{ SERVER_FQDN }}'
     - 'crudini --set /var/lib/pulse2/pki/conf/pulse.cnf alt_names DNS.2 {{ XMPP_DOMAIN }}'
     - 'openssl req -config /var/lib/pulse2/pki/conf/pulse.cnf -subj "/countryName=FR/organizationName=SIVEO/commonName={{ SERVER_FQDN }}" -passout pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -new -keyout /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem'
     - 'openssl ca -config /var/lib/pulse2/pki/conf/pulse.cnf -name CA_Intermediate -passin pass:{{ PKI_PASSWORD }} -batch -extensions server_cert -extfile /var/lib/pulse2/pki/conf/pulse.cnf -keyfile /var/lib/pulse2/pki/private/cakey.pem -out /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem -infiles /var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem'
     - 'openssl rsa -passin pass:{{ PKI_PASSWORD }} -in /var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem -out /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem'
     - 'cat /var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem >> /var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem'
     - 'crudini --del /var/lib/pulse2/pki/conf/pulse.cnf alt_names'
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CERTS - Set proper permissions on the certificates on pulsemain
   file:
     path: "{{ item.path }}"
     mode: "{{ item.mode }}"
     state: "{{ item.state }}"
   with_items:
     - { path: '/var/lib/pulse2/pki/private/{{ SERVER_FQDN }}.key.pem', mode: '0600', state: 'file' }
     - { path: '/var/lib/pulse2/pki/newcerts/{{ SERVER_FQDN }}.cert.pem', mode: '0644', state: 'file' }
     - { path: '/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem', mode: '0644', state: 'file' }
     - { path: '/var/lib/pulse2/pki/req/{{ SERVER_FQDN }}.req.pem', mode: '', state: 'absent' }
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   no_log: True

 - name: CERTS - Fetch relay certificate from pulsemain
   fetch:
     src: "/var/lib/pulse2/pki/{{ SERVER_FQDN }}.pem"
     dest: "/tmp/{{ ansible_hostname }}-temp.pem"
     flat: yes
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CERTS - Copy relay certificate to /etc/ejabberd/{{ XMPP_DOMAIN }}.pem
   copy:
     src: "/tmp/{{ ansible_hostname }}-temp.pem"
     dest: "/etc/ejabberd/{{ XMPP_DOMAIN }}.pem"
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CERTS - Replace ejabberd.pem by the certificate
   lineinfile:
     dest: /etc/ejabberd/ejabberd.yml
     regexp: '^\s*certfile: .*$'
     line: '    certfile: "/etc/ejabberd/ejabberd.pem"'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: CERTS - Restart service
   systemd:
     name: ejabberd
     state: restarted
   no_log: True

##########################################################
#                   Specifique CNAM                      #
##########################################################

 - name: crudini quick_deploy max_size_stanza_xmpp 0
   shell: crudini --set /etc/pulse-xmpp-agent/relayconf.ini.local quick_deploy max_size_stanza_xmpp 0
   no_log: True

##########################################################
#                     Final steps                        #
##########################################################

 - name: FINAL - Get api key from syncthing on pulsemain
   command: xmlstarlet sel -t -v "configuration/gui/apikey" /var/lib/syncthing/.config/syncthing/config.xml
   register: apikey
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: FINAL - Force synch of syncthing folders from pulsemain
   command: 'curl -X POST -H "X-API-Key: {{ apikey.stdout }}" http://localhost:8384/rest/db/override?folder={{ item }}'
   with_items:
     - pulsemaster_packages
     - pulsemaster_baseremoteagent
     - pulsemaster_bootmenus
     - pulsemaster_downloads
   vars:
     ansible_ssh_user: root
   delegate_to: '{{ PULSEMAIN_IP }}'
   when:
     - INSTALL_TYPE != 'p'
   no_log: True

 - name: FINAL - Pause for 30 seconds to finalize configs
   pause:
     seconds: 30
   no_log: True

 - name: FINAL - Restart pulse relay service
   systemd:
     name: pulse-xmpp-agent-relay
     state: restarted
   when:
     - INSTALL_TYPE != 'p'
   no_log: True
