##########################################################
#          Create teams and assign users to them         #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.0.0'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: CREATE_TEAMS - Get team id if it exists
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT id from pulse_teams where name = %(name)s
    named_args:
      name: '{{ TEAM_NAME }}'
  register: res_queryteamid

- name: CREATE_TEAMS - Get MAX_ID FROM pulse_teams when team does not exist
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT COALESCE(MAX(id), 0) as id FROM pulse_teams
  register: res_querymaxteamid
  when: 
    - res_queryteamid.rowcount[0] == 0

- name: CREATE_TEAMS - Set id for team update when team exists
  ansible.builtin.set_fact:
    id_team: '{{ res_queryteamid.query_result[0][0].id }}'
  when:
    - res_queryteamid.rowcount[0] != 0

- name: CREATE_TEAMS - Set id for team update when team does not exist
  ansible.builtin.set_fact:
    id_team: '{{ res_querymaxteamid.query_result[0][0].id + 1 }}'
  when:
    - res_queryteamid.rowcount[0] == 0

- name: CREATE_TEAMS - Get user id if it exists
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT id from pulse_users where login = %(login)s
    named_args:
      login: '{{ USER_REGEX }}'
  register: res_queryuserid

- name: CREATE_TEAMS - Get MAX_ID FROM pulse_users when user does not exist
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT COALESCE(MAX(id), 0) as id FROM pulse_users
  register: res_querymaxuserid
  when: 
    - res_queryuserid.rowcount[0] == 0

- name: CREATE_TEAMS - Set id for user update when user exists
  ansible.builtin.set_fact:
    id_user: '{{ res_queryuserid.query_result[0][0].id }}'
  when:
    - res_queryuserid.rowcount[0] != 0

- name: CREATE_TEAMS - Set id for user update when user does not exist
  ansible.builtin.set_fact:
    id_user: '{{ res_querymaxuserid.query_result[0][0].id + 1 }}'
  when:
    - res_queryuserid.rowcount[0] == 0

- name: CREATE_TEAMS - Create or update team and user
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - INSERT INTO pulse_teams (id, name, comment) VALUES ({{ id_team }}, '{{ TEAM_NAME }}', '{{ TEAM_NAME }} inserted by ansible') ON DUPLICATE KEY UPDATE name='{{ TEAM_NAME }}', comment='{{ TEAM_NAME }} inserted by ansible'
      - INSERT INTO pulse_users (id, login, comment) VALUES ({{ id_user }}, '{{ USER_REGEX }}', '{{ USER_REGEX }} inserted by ansible') ON DUPLICATE KEY UPDATE login='{{ USER_REGEX }}', comment='{{ USER_REGEX }} inserted by ansible'
      - INSERT IGNORE INTO pulse_team_user (id_user, id_team) VALUES ({{ id_user }}, {{ id_team }})
