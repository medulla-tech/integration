##########################################################
#                   relay-agent setup                    #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.1.0'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: RELAY_AGENT - Add the OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: RELAY_AGENT - Install relay server packages
  ansible.builtin.yum:
    state: latest
    pkg:
      - pulse-xmpp-agent-relay
      - pulse-debug-tools
  when:
    - ansible_distribution == 'CentOS'

- name: RELAY_AGENT - Install relay server packages
  ansible.builtin.yum:
    state: latest
    pkg:
      - pulse-xmpp-agent-relay
      - medulla-debug-tools
  when:
    - ansible_distribution == 'RedHat'

- name: RELAY_AGENT - Install relay server packages
  ansible.builtin.apt:
    state: latest
    pkg:
      - pulse-xmpp-agent-relay
      - pulse-debug-tools
  when:
    - ansible_distribution == 'Debian'

- name: RELAY_AGENT - Install tools needed for the setup
  ansible.builtin.yum:
    state: latest
    pkg:
      - python3.11-PyMySQL
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: RELAY_AGENT - Install tools needed for the setup
  ansible.builtin.apt:
    state: latest
    pkg:
      - python3-pymysql
  when:
    - ansible_distribution == 'Debian'

- name: RELAY_AGENT - Configure systemd to allow monitoring
  community.general.ini_file:
    path: /etc/systemd/system.conf
    section: Manager
    option: '{{ item }}'
    value: 'yes'
    backup: yes
  with_items:
    - DefaultMemoryAccounting
    - DefaultCPUAccounting
    - BlockIOAccounting

- name: RELAY_AGENT - Force systemd to re-execute itself
  ansible.builtin.systemd:
    daemon_reexec: true

- name: RELAY_AGENT - Configure relay
  ansible.builtin.template:
    src: '{{ item }}.ini.local.j2'
    dest: /etc/pulse-xmpp-agent/{{ item }}.ini.local
    mode: '0644'
    backup: yes
  with_items:
    - relayconf
    - applicationdeploymentjson
    - downloadfile
    - downloadfileexpert
    - guacamole
    - guacamoleconf
    - reverse_ssh_on
    - scheduling_mon_pulsesystem
    - wakeonlan
  notify:
    - RELAY_AGENT - Restart pulse-xmpp-agent-relay

- name: RELAY_AGENT - Update /etc/hosts
  ansible.builtin.lineinfile:
    dest: "/etc/hosts"
    line: "{{ item.line }}"
    regexp: "{{ item.regex }}"
  when: item.when
  with_items:
    - { regex: '^.* pulse$', line: '{{ PULSEMAIN_IP }} pulse', when: '{{ PULSEMAIN_IP != "" }}' }
    - { regex: '^.* {{ XMPP_DOMAIN }}$', line: '{{ IP_ADDRESS }} {{ XMPP_DOMAIN }}', when: '{{ ansible_hostname != "pulse" }}' }
  notify:
    - RELAY_AGENT - Restart pulse-xmpp-agent-relay

- name: RELAY_AGENT - Get all Medulla consoles
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT nameserver FROM relayserver WHERE jid LIKE '%@pulse/%'
  register: res_querymmc
  delegate_to: '{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN != "" else omit }}'
  when:
    - PULSEMAIN_FQDN is defined
    - PULSEMAIN_FQDN != ''

- name: RELAY_AGENT - Update /etc/hosts on all Medulla console servers
  ansible.builtin.lineinfile:
    dest: /etc/hosts
    line: '{{ IP_ADDRESS }} {{ XMPP_DOMAIN }}'
    regexp: '^.* {{ XMPP_DOMAIN }}$'
  notify:
    - RELAY_AGENT - Restart pulse-xmpp-agent-relay
  delegate_to: '{{ item.nameserver }}.{{ DOMAIN_NAME }}'
  loop: "{{ res_querymmc.query_result[0] }}"
  when:
    - PULSEMAIN_FQDN is defined
    - PULSEMAIN_FQDN != ''

- name: RELAY_AGENT - Force relay to re-register in case of upgrade
  ansible.builtin.file:
    dest: '{{ PYTHON_BASEDIR }}/pulse_xmpp_agent/BOOLFILECOMPLETREGISTRATION'
    state: touch
  notify:
    - RELAY_AGENT - Restart pulse-xmpp-agent-relay

- name: RELAY_AGENT - Force restart of service after configuration
  ansible.builtin.meta: flush_handlers

- name: RELAY_AGENT - Get location of server from ITSM
  community.mysql.mysql_query:
    login_host: '{{ ITSM_DBHOST }}'
    login_port: '{{ ITSM_DBPORT }}'
    login_user: '{{ ITSM_DBUSER }}'
    login_password: '{{ ITSM_DBPASSWORD }}'
    login_db: '{{ ITSM_DBNAME }}'
    query:
      - SELECT glpi_locations.completename AS locationname FROM glpi_locations LEFT JOIN glpi_computers ON glpi_computers.locations_id=glpi_locations.id WHERE glpi_computers.name = '{{ ansible_hostname }}'
  register: res_location
  delegate_to: '{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN != "" else omit }}'
  when:
    - CLUSTER_FROM_ITSM_LOCATION

- name: RELAY_AGENT - Get entity of server from ITSM
  community.mysql.mysql_query:
    login_host: '{{ ITSM_DBHOST }}'
    login_port: '{{ ITSM_DBPORT }}'
    login_user: '{{ ITSM_DBUSER }}'
    login_password: '{{ ITSM_DBPASSWORD }}'
    login_db: '{{ ITSM_DBNAME }}'
    query:
      - SELECT glpi_entities.completename AS entityname FROM glpi_entities LEFT JOIN glpi_computers ON glpi_computers.entities_id=glpi_entities.id WHERE glpi_computers.name = '{{ ansible_hostname }}'
  register: res_entity
  delegate_to: '{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN != "" else omit }}'
  when:
    - CLUSTER_FROM_ITSM_LOCATION

- name: RELAY_AGENT - Define cluster description
  ansible.builtin.set_fact:
    CLUSTER_DESCRIPTION: "{{ res_entity.query_result[0][0].entityname.split(' > ')[3:] | join(' > ') | regex_replace (\"'\",\" \") }} # {{ res_location.query_result[0][0].locationname | regex_replace (\"'\",\" \") }}"
  when:
    - CLUSTER_FROM_ITSM_LOCATION

- name: RELAY_AGENT - Define cluster name
  ansible.builtin.set_fact:
    CLUSTER_NAME: "{{ CLUSTER_NAME_PREFIX }}-{{ CLUSTER_DESCRIPTION | hash('md5') }}"
  when:
    - CLUSTER_FROM_ITSM_LOCATION

- name: RELAY_AGENT - Create or update cluster
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - INSERT IGNORE INTO cluster_ars (name, description) VALUES('{{ CLUSTER_NAME }}', '{{ CLUSTER_DESCRIPTION }}') ON DUPLICATE KEY UPDATE description='{{ CLUSTER_DESCRIPTION }}'
  delegate_to: "{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN is defined else omit }}"

- name: RELAY_AGENT - Get cluster id for relay
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT id from cluster_ars where name = %(name)s
    named_args:
      name: '{{ CLUSTER_NAME }}'
  register: res_queryclusterid
  delegate_to: '{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN != "" else omit }}'

- name: RELAY_AGENT - Get RELAYSERVER_ID FROM relayserver waiting up to 5 minutes
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - SELECT id FROM relayserver WHERE jid LIKE %(jid)s
    named_args:
      jid: 'rs{{ XMPP_DOMAIN }}{{ RELAY_INDEX }}@{{ XMPP_DOMAIN }}/%'
  register: res_queryrelayserverid
  retries: 10
  delay: 30
  until: res_queryrelayserverid.rowcount[0] != 0
  delegate_to: "{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN is defined else omit }}"

- name: RELAY_AGENT - Make sure ssh key exists
  ansible.builtin.user:
    name: root
    generate_ssh_key: yes
    ssh_key_bits: 2048
  register: sshkey

- name: RELAY_AGENT - Insert relay server ssh key into relayserver table
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - UPDATE relayserver SET ssh_public_key = '{{ sshkey.ssh_public_key }}' WHERE id = {{ res_queryrelayserverid.query_result[0][0].id }}
  delegate_to: "{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN is defined else omit }}"

- name: RELAY_AGENT - Insert relay in its cluster
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - INSERT INTO has_cluster_ars (id_ars, id_cluster) VALUES ({{ res_queryrelayserverid.query_result[0][0].id }}, {{ res_queryclusterid.query_result[0][0].id }}) ON DUPLICATE KEY UPDATE id_cluster='{{ res_queryclusterid.query_result[0][0].id }}'
  delegate_to: "{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN is defined else omit }}"

- name: RELAY_AGENT - Create initial substituteconf records
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - INSERT IGNORE INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) VALUES ('{{ item.type }}', '{{ item.jid }}', 1)
  with_items:
    - { type: 'assessor', jid: 'master_asse@pulse' }
    - { type: 'subscription', jid: 'master_subs@pulse' }
    - { type: 'registration', jid: 'master_reg@pulse' }
    - { type: 'inventory', jid: 'master_inv@pulse' }
    - { type: 'logger', jid: 'master_log@pulse' }
    - { type: 'monitoring', jid: 'master_mon@pulse' }
    - { type: 'deployment', jid: 'master_depl@pulse' }
    - { type: 'updates', jid: 'master_upd@pulse' }
    - { type: 'reconfigurator', jid: 'master_reconf@pulse' }
  when:
    - PULSEMAIN_IP == ''

- name: RELAY_AGENT - Create substituteconf records
  community.mysql.mysql_query:
    login_host: '{{ DBHOST }}'
    login_port: '{{ DBPORT }}'
    login_user: '{{ DBUSER }}'
    login_password: '{{ DBPASSWORD }}'
    login_db: 'xmppmaster'
    query:
      - INSERT IGNORE INTO xmppmaster.substituteconf (type, jidsubtitute, relayserver_id) SELECT DISTINCT type, jidsubtitute, '{{ res_queryrelayserverid.query_result[0][0].id }}' FROM substituteconf
  delegate_to: "{{ PULSEMAIN_FQDN if PULSEMAIN_FQDN is defined else omit }}"

- name: RELAY_AGENT - Ensure relay service is running
  ansible.builtin.systemd:
    name: pulse-xmpp-agent-relay
    state: started
    enabled: yes
    masked: no

- name: RELAY_AGENT - Ensure package watching service is running
  ansible.builtin.systemd:
    name: pulse-package-watching
    state: started
    enabled: yes
    masked: no
