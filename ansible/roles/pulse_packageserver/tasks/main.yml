##########################################################
#                  Pulse Package Server                  #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.1.0'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: PULSE_PACKAGESERVER - Install Pulse package server
  ansible.builtin.yum:
    pkg:
      - pulse2-package-server
      - pulse2-common
    state: latest
  when:
    - ansible_distribution == 'CentOS'

- name: PULSE_PACKAGESERVER - Install Pulse package server
  ansible.builtin.apt:
    pkg:
      - pulse2-package-server
      - pulse2-common
    state: latest
  when:
    - ansible_distribution == 'Debian'

- name: PULSE_PACKAGESERVER - Check if package-server.ini.local exists
  ansible.builtin.stat:
    path: /etc/mmc/pulse2/package-server/package-server.ini.local
  register: respsinifile

- name: PULSE_PACKAGESERVER - Load config file to find Package Server UUID
  ansible.builtin.slurp:
    src: /etc/mmc/pulse2/package-server/package-server.ini.local
  register: psinifile
  when:
    - respsinifile.stat.exists

- name: PULSE_PACKAGESERVER - Find Package Server UUID
  ansible.builtin.set_fact:
    IMAGING_UUID: "{{ psinifile['content'] | b64decode | regex_search('uuid = (.+)', '\\1') | first }}"
  when:
    - respsinifile.stat.exists

- name: PULSE_PACKAGESERVER - Generate IMAGING_UUID if not existing
  ansible.builtin.set_fact:
    IMAGING_UUID: "{{ lookup('password', '/dev/null chars=ascii_letters,digits length=32') | to_uuid }}"
  when:
    - not respsinifile.stat.exists

- name: PULSE_PACKAGESERVER - Configure package server
  ansible.builtin.template:
    src: package-server.ini.local.j2
    dest: /etc/mmc/pulse2/package-server/package-server.ini.local
    mode: '0644'
    backup: yes
  notify:
    - PULSE_PACKAGESERVER - Restart package server

- name: PULSE_PACKAGESERVER/PKI - Configure certificates
  ansible.builtin.copy:
    src: "{{ PKI_PATH }}/{{ SERVER_FQDN }}.pem"
    dest: "{{ item }}"
    remote_src: yes
  with_items:
    - /etc/mmc/pulse2/package-server/keys/cacert.pem
    - /etc/mmc/pulse2/package-server/keys/privkey.pem
  notify:
    - PULSE_PACKAGESERVER - Restart package server

- name: PULSE_PACKAGESERVER - Ensure package server is running
  ansible.builtin.systemd:
    name: pulse2-package-server
    state: started
    enabled: yes
    masked: no
