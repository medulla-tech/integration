##########################################################
#                  Install LDAP server                   #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.0.0'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: LDAP - Add the OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"
  ignore_errors: true

- name: LDAP - Define parameters for debian
  ansible.builtin.debconf:
    name: slapd
    question: '{{ item.question }}'
    vtype: '{{ item.vtype }}'
    value: '{{ item.value }}'
  with_items:
    - { question: slapd/password1, vtype: password, value: '{{ LDAPADMINPASSWD }}' }
    - { question: slapd/password2, vtype: password, value: '{{ LDAPADMINPASSWD }}' }
    - { question: slapd/domain, vtype: string, value: '{{ ansible_domain }}' }
    - { question: slapd/purge_database, vtype: boolean, value: 'True' }
    - { question: slapd/move_old_database, vtype: boolean, value: 'True' }
  when:
    - ansible_distribution == 'Debian'
  no_log: True

- name: LDAP - Install ldap server
  ansible.builtin.apt:
    state: latest
    pkg:
      - ldap-server
  when:
    - ansible_distribution == 'Debian'

- name: LDAP - Install ldap server
  ansible.builtin.yum:
    state: latest
    pkg:
      - openldap-servers
      - openldap-clients
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Install tools needed for the setup
  ansible.builtin.yum:
    state: latest
    pkg:
      - python3-ldap
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Install tools needed for the setup
  ansible.builtin.apt:
    state: latest
    pkg:
      - python3-pyldap
  when:
    - ansible_distribution == 'Debian'

- name: LDAP - Configure ldap olcDatabase
  ansible.builtin.lineinfile:
    path: '/etc/openldap/slapd.d/cn=config/olcDatabase={2}hdb.ldif'
    regexp: '{{ item.regexp }}'
    line: '{{ item.line }}'
    state: 'present'
  with_items:
  - { regexp: '^olcSuffix: .*$' , line: 'olcSuffix: {{ LDAP_BASEDN }}' }
  - { regexp: '^olcRootDN: .*$', line: 'olcRootDN: cn=admin,{{ LDAP_BASEDN }}' }
  - { regexp: '^olcRootPW: .*$', line: 'olcRootPW: {{ LDAPADMINPASSWD }}' }
  notify:
    - LDAP - Restart slapd
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Copy ldap dbconfig
  ansible.builtin.copy:
    src: /usr/share/openldap-servers/DB_CONFIG.example
    dest: /var/lib/ldap/DB_CONFIG
    remote_src: yes
  notify:
    - LDAP - Restart slapd
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Change owner and group for ldap directory
  ansible.builtin.file:
    path: /var/lib/ldap/
    owner: ldap
    group: ldap
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Force restart of service after configuration
  ansible.builtin.meta: flush_handlers

- name: LDAP - Add entry basedn
  community.general.ldap_entry:
    dn: '{{ LDAP_BASEDN }}'
    server_uri: ldapi:///
    bind_dn: 'cn=admin,{{ LDAP_BASEDN }}'
    bind_pw: '{{ LDAPADMINPASSWD }}'
    objectClass:
      - top
      - dcObject
      - organization
    attributes:
      dc: '{{ ansible_domain.split(".", 1)[0] }}'
      o: '{{ ansible_domain }}'
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Add entry schema
  ansible.builtin.command: '{{ item }}'
  with_items:
  - 'ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/cosine.ldif'
  - 'ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/nis.ldif'
  - 'ldapadd -Q -Y EXTERNAL -H ldapi:/// -f /etc/openldap/schema/inetorgperson.ldif'
  when:
    - ansible_distribution == 'CentOS'

- name: LDAP - Copy certificate to /etc/{{ CERTS_PATH }}/{{ SERVER_FQDN }}.pem
  ansible.builtin.copy:
    src: "{{ PKI_PATH }}/{{ SERVER_FQDN }}.pem"
    dest: "/etc/{{ SLAPD_CERTS_PATH }}/"
    remote_src: yes

- name: LDAP - Copy certificates_modify.ldif to /tmp
  ansible.builtin.template:
    src: certificates_modify.ldif.j2
    dest: /tmp/certificates_modify.ldif
    mode: '0644'

- name: LDAP - Import certificates configuration to cn=config
  ansible.builtin.command: 'ldapmodify -Q -Y EXTERNAL -H ldapi:/// -f /tmp/certificates_modify.ldif'
  notify:
    - LDAP - Restart slapd

- name: LDAP - Enable ldaps
  ansible.builtin.lineinfile:
    dest: /etc/default/slapd
    line: 'SLAPD_SERVICES="ldaps:/// ldap:/// ldapi:///"'
    regexp: '^SLAPD_SERVICES=.*$'
  notify:
    - LDAP - Restart slapd
  when:
    - ansible_distribution == 'Debian'

- name: LDAP - Enable ldaps
  ansible.builtin.lineinfile:
    dest: /etc/sysconfig/slapd
    line: 'SLAPD_URLS="ldaps:/// ldap:/// ldapi:///"'
    regexp: '^SLAPD_URLS=.*$'
  notify:
    - LDAP - Restart slapd
  when:
    - ansible_distribution == 'Centos'

- name: LDAP - Force restart of service after configuration
  ansible.builtin.meta: flush_handlers

- name: LDAP - Copy syncprov_modify.ldif to /tmp
  ansible.builtin.copy:
    src: syncprov_modify.ldif
    dest: /tmp/syncprov_modify.ldif
    mode: '0644'

- name: LDAP - Enable syncprov module for cn=config database
  ansible.builtin.command: 'ldapmodify -c -Q -Y EXTERNAL -H ldapi:/// -f /tmp/syncprov_modify.ldif'
  register: command_result
  notify:
    - LDAP - Restart slapd
  failed_when:
    - (command_result.rc != 0) and (command_result.rc != 80)

- name: LDAP - Copy serverid_modify.ldif to /tmp
  ansible.builtin.template:
    src: serverid_modify.ldif.j2
    dest: /tmp/serverid_modify.ldif
    mode: '0644'

- name: LDAP - Import olcServerID configuration to cn=config
  ansible.builtin.command: 'ldapmodify -c -Q -Y EXTERNAL -H ldapi:/// -f /tmp/serverid_modify.ldif'
  register: command_result
  notify:
    - LDAP - Restart slapd
  failed_when:
    - (command_result.rc != 0) and (command_result.rc != 80)

- name: LDAP - Configure LDAP client
  ansible.builtin.lineinfile:
    dest: '{{ LDAP_CONF }}'
    line: TLS_CACERTDIR /etc/ssl/certs/
    mode: '0644'
    create: true
    backup: true

- name: LDAP - Force restart of service after configuration
  ansible.builtin.meta: flush_handlers

- name: LDAP - Ensure ldap server is running
  ansible.builtin.systemd:
    name: 'slapd'
    state: started
    enabled: yes
    masked: no
