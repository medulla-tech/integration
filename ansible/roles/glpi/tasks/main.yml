##########################################################
#                      GLPI setup                        #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.1.1'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: GLPI - Add the OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: GLPI - Install glpi
  ansible.builtin.yum:
    pkg:
      - glpi-{{ GLPI_VERSION }}.*
      - glpi
      - php-ldap
      - php-xml
      - php-gd
      - php-zip
      - php-xmlrpc
      - php-mbstring
      - php-intl
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: GLPI - Install glpi
  ansible.builtin.apt:
    pkg:
      - glpi={{ GLPI_VERSION }}-*
      - php-ldap
      - php-xml
      - php-gd
      - php-zip
      - php-xmlrpc
      - php-mbstring
      - php-intl
  when:
    - ansible_distribution == 'Debian'

- name: GLPI - Install Fusion Inventory
  ansible.builtin.yum:
    pkg:
      - glpi-plugin-fusioninventory-{{ GLPI_VERSION }}*
      - glpi-plugin-fusioninventory
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'
    - GLPI_PLUGIN == 'fusioninventory'

- name: GLPI - Install Fusion Inventory
  ansible.builtin.apt:
    pkg:
      - fusioninventory-for-glpi={{ GLPI_VERSION }}+*
  when:
    - ansible_distribution == 'Debian'
    - GLPI_PLUGIN == 'fusioninventory'

- name: GLPI - Install Glpi Inventory
  ansible.builtin.apt:
    pkg:
      - glpi-inventory-plugin
  when:
    - ansible_distribution == 'Debian'
    - GLPI_PLUGIN == 'glpiinventory'

- name: GLPI - Install tools needed for the setup
  ansible.builtin.yum:
    state: latest
    pkg:
      - python3.11-PyMySQL
      - python3.11-netaddr
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: GLPI - Install tools needed for the setup
  ansible.builtin.apt:
    state: latest
    pkg:
      - python3-pymysql
      - python3-netaddr
  when:
    - ansible_distribution == 'Debian'

- name: GLPI - Create database
  community.mysql.mysql_db:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ DBADMINUSER }}'
    login_password: '{{ DBADMINPASSWD }}'
    name: '{{ GLPI_DBNAME }}'
    state: present

- name: GLPI - Create database user
  community.mysql.mysql_user:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ DBADMINUSER }}'
    login_password: '{{ DBADMINPASSWD }}'
    name: '{{ GLPI_DBUSER }}'
    password: '{{ GLPI_DBPASSWD }}'
    host: '{{ item.host }}'
    state: present
    priv:
      '{{ GLPI_DBNAME }}.*:ALL'
  when: item.when
  with_items:
    - { host: 'localhost', when: true }
    - { host: '{{ GLPI_DBHOST }}', when: '{{ GLPI_DBHOST != "localhost" }}' }
    - { host: '{{ GLPI_DBHOST_IP }}', when: '{{ GLPI_DBHOST != "localhost" }}' }
    - { host: '{{ IP_ADDRESS }}', when: true }
    - { host: '{{ SERVER_FQDN }}', when: true }
    - { host: '{{ PUBLIC_IP }}', when: '{{ PUBLIC_IP != "" }}' }
  no_log: True

- name: GLPI - Reset GLPI_CHANGED variable
  ansible.builtin.set_fact:
    GLPI_CHANGED: False

- name: GLPI - Check if .dbinitialised is present
  ansible.builtin.stat:
    path: /var/lib/glpi/.dbinitialised
  register: resdbinitialised

- name: GLPI - Set GLPI_DBINITIALISED if .dbinitialised is present
  ansible.builtin.set_fact:
    GLPI_DBINITIALISED: True
  when:
    - resdbinitialised.stat.exists

- name: GLPI - Initialise database
  ansible.builtin.command: php /usr/share/glpi/bin/console -n db:install --db-host={{ GLPI_DBHOST }} --db-port={{ GLPI_DBPORT }} --db-name {{ GLPI_DBNAME }} --db-user {{ DBADMINUSER }} --db-password '{{ DBADMINPASSWD }}' --default-language=fr_FR --force --reconfigure
  when:
    - GLPI_DBINITIALISED is not defined
  register: glpi_init

- name: GLPI - Register GLPI_CHANGED variable
  ansible.builtin.set_fact:
    GLPI_CHANGED: '{{ glpi_init.changed }}'
  when:
    glpi_init.changed

- name: GLPI - Set marker for database initialisation
  ansible.builtin.file:
    path: /var/lib/glpi/.dbinitialised
    state: touch
  when:
    - GLPI_CHANGED | bool

- name: GLPI - Upgrade database if needed
  ansible.builtin.command: php /usr/share/glpi/bin/console -n db:update

- name: GLPI - Configure LDAP authentication
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - INSERT INTO glpi_authldaps (name, host, basedn, port, condition, login_field, group_field, group_condition, group_search_type, group_member_field, email1_field, realname_field, firstname_field, phone_field, mobile_field, use_dn, language_field, is_default, is_active) values ('LocalLDAP', %(host)s, %(basedn)s, %(port)s, %(condition)s, %(login_field)s, %(group_field)s, %(group_condition)s, %(group_search_type)s, %(group_member_field)s, 'mail', 'sn', 'givenname', 'telephonenumber', 'mobile', %(use_dn)s, 'preferredlanguage', %(is_default)s, 1)
    named_args:
      host: '127.0.0.1'
      basedn: '{{ LDAP_BASEDN }}'
      port: 389
      condition: '(objectClass=inetOrgPerson)'
      login_field: 'uid'
      group_field: NULL
      group_condition: '(&(objectClass=posixGroup)(cn=GLPI-*))'
      group_search_type: 1
      group_member_field: memberuid
      use_dn: 0
      is_default: 0
  when:
    - GLPI_CHANGED | bool
    - EXTERNAL_LDAP_URL == ''

- name: GLPI - Configure LDAP authentication
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - INSERT INTO glpi_authldaps (name, host, basedn, port, condition, login_field, group_field, group_condition, group_search_type, group_member_field, email1_field, realname_field, firstname_field, phone_field, mobile_field, use_dn, language_field, is_default, is_active) values ('LocalLDAP', %(host)s, %(basedn)s, %(port)s, %(condition)s, %(login_field)s, %(group_field)s, %(group_condition)s, %(group_search_type)s, %(group_member_field)s, 'mail', 'sn', 'givenname', 'telephonenumber', 'mobile', %(use_dn)s, 'preferredlanguage', %(is_default)s, 1)
    named_args:
      host: '{{ EXTERNAL_LDAP_URL | ansible.builtin.urlsplit("hostname") }}'
      basedn: '{{ EXTERNAL_LDAP_SUFFIX }}'
      port: '{{ EXTERNAL_LDAP_URL | ansible.builtin.urlsplit("port") }}'
      condition: '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))'
      login_field: '{{ EXTERNAL_LDAP_USERATTR }}'
      group_field: memberof
      group_condition: '(&(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))'
      group_search_type: 0
      group_member_field: NULL
      use_dn: 1
      is_default: 0
  when:
    - GLPI_CHANGED | bool
    - EXTERNAL_LDAP_URL != ''
    - EXTERNAL_LDAP_TYPE == 'ad'

- name: GLPI - Configure LDAP authentication
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - INSERT INTO glpi_authldaps (name, host, basedn, port, condition, login_field, group_field, group_condition, group_search_type, group_member_field, email1_field, realname_field, firstname_field, phone_field, mobile_field, use_dn, language_field, is_default, is_active) values ('LocalLDAP', %(host)s, %(basedn)s, %(port)s, %(condition)s, %(login_field)s, %(group_field)s, %(group_condition)s, %(group_search_type)s, %(group_member_field)s, 'mail', 'sn', 'givenname', 'telephonenumber', 'mobile', %(use_dn)s, 'preferredlanguage', %(is_default)s, 1)
    named_args:
      host: '{{ EXTERNAL_LDAP_URL | ansible.builtin.urlsplit("hostname") }}'
      basedn: '{{ EXTERNAL_LDAP_SUFFIX }}'
      port: '{{ EXTERNAL_LDAP_URL | ansible.builtin.urlsplit("port") }}'
      condition: '(objectClass=inetOrgPerson)'
      login_field: '{{ EXTERNAL_LDAP_USERATTR }}'
      group_field: NULL
      group_condition: '(objectClass=posixGroup)'
      group_search_type: 1
      group_member_field: memberuid
      use_dn: 0
      is_default: 0
  when:
    - GLPI_CHANGED | bool
    - EXTERNAL_LDAP_URL != ''
    - EXTERNAL_LDAP_TYPE == 'openldap'

- name: GLPI - Define password and enable token for root user
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - UPDATE glpi_users SET name = 'root' WHERE name = 'glpi'
    - UPDATE glpi_users SET password = MD5('{{ GLPI_ADMINPASSWD }}') where name = 'root'
    - UPDATE glpi_users SET api_token = '{{ GLPI_ROOTUSER_APITOKEN }}' where name = 'root'
    - UPDATE glpi_configs SET value='1' WHERE name='enable_api'
    - UPDATE glpi_configs SET value='http://{{ SERVER_FQDN }}/glpi/apirest.php/' WHERE name='url_base_api'
    - UPDATE glpi_configs SET value='1' WHERE name='enable_api_login_credentials'
    - UPDATE glpi_configs SET value='1' WHERE name='enable_api_login_external_token'
    - INSERT INTO glpi_apiclients (is_recursive, name, is_active, ipv4_range_start, ipv4_range_end) VALUES (1, 'full access from {{ IP_ADDRESS }}', 1, {{ IP_ADDRESS | ansible.utils.ipaddr('address') | ansible.utils.ipaddr('int') }}, {{ IP_ADDRESS | ansible.utils.ipaddr('address') | ansible.utils.ipaddr('int') }})
    single_transaction: yes
  no_log: True

- name: GLPI - Define access to API when a public IP is set
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - INSERT INTO glpi_apiclients (is_recursive, name, is_active, ipv4_range_start, ipv4_range_end) VALUES (1, 'full access from {{ PUBLIC_IP }}', 1, {{ PUBLIC_IP | ansible.utils.ipaddr('address') | ansible.utils.ipaddr('int') }}, {{ PUBLIC_IP | ansible.utils.ipaddr('address') | ansible.utils.ipaddr('int') }})
    single_transaction: yes
  when:
    - PUBLIC_IP != ''

- name: GLPI - Make log file writable for all
  ansible.builtin.file:
    path: /usr/share/glpi/files/_log/php-errors.log
    mode: '0666'

- name: GLPI - Initialise session to API
  ansible.builtin.uri:
    url: "http://{{ SERVER_FQDN }}/glpi/apirest.php/initSession"
    url_username: root
    url_password: '{{ GLPI_ADMINPASSWD }}'
    force_basic_auth: yes
    method: GET
    use_proxy: false
  register: json_session

- name: GLPI - Delete all initially created users apart from glpi/root
  ansible.builtin.uri:
    url: "http://{{ SERVER_FQDN }}/glpi/apirest.php/User/{{ item }}"
    url_username: root
    url_password: '{{ GLPI_ADMINPASSWD }}'
    force_basic_auth: yes
    headers:
      Session-Token: '{{ json_session.json.session_token }}'
    method: DELETE
    return_content: yes
    use_proxy: false
  when:
    - GLPI_CHANGED | bool
  with_items:
    - 3
    - 4
    - 5
  register: result
  failed_when: ('not found' not in result.content) and ('introuvable' not in result.content) and (result.status != 200)

- name: GLPI - Delete all initially associated profiles apart from glpi/root
  ansible.builtin.uri:
    url: "http://{{ SERVER_FQDN }}/glpi/apirest.php/Profile_User/{{ item }}"
    url_username: root
    url_password: '{{ GLPI_ADMINPASSWD }}'
    force_basic_auth: yes
    headers:
      Session-Token: '{{ json_session.json.session_token }}'
    method: DELETE
    return_content: yes
    use_proxy: false
  when:
    - GLPI_CHANGED | bool
  with_items:
    - 3
    - 4
    - 5
  register: result
  failed_when: ('not found' not in result.content) and ('introuvable' not in result.content) and (result.status != 200)

- name: GLPI - Rename first entity in GLPI
  ansible.builtin.uri:
    url: "http://{{ SERVER_FQDN }}/glpi/apirest.php/Entity/0"
    url_username: root
    url_password: '{{ GLPI_ADMINPASSWD }}'
    force_basic_auth: yes
    headers:
      Session-Token: '{{ json_session.json.session_token }}'
    method: PUT
    body_format: json
    body:
      input:
        name: '{{ ORGANISATION }}'
        completename: '{{ ORGANISATION }}'
    return_content: yes
    use_proxy: false
  register: result
  when:
    - GLPI_CHANGED | bool
  failed_when: ('false' not in result.content) and (result.status != 200)

- name: GLPI - Create location in GLPI
  ansible.builtin.uri:
    url: "http://{{ SERVER_FQDN }}/glpi/apirest.php/Location/"
    url_username: root
    url_password: '{{ GLPI_ADMINPASSWD }}'
    force_basic_auth: yes
    headers:
      Session-Token: '{{ json_session.json.session_token }}'
    method: POST
    body_format: json
    body:
      input:
        name: '{{ ORGANISATION }}'
        completename: '{{ ORGANISATION }}'
        entities_id: 0
        locations_id: 0
    return_content: yes
    use_proxy: false
  register: result
  when:
    - GLPI_CHANGED | bool
  failed_when: ('Duplicate entry' not in result.content) and (result.status != 200) and (result.status != 201)

- name: GLPI - Enable {{ GLPI_PLUGIN }} plugin after db init
  ansible.builtin.command: php /usr/share/glpi/bin/console {{ item }} {{ GLPI_PLUGIN }}
  with_items:
    - 'glpi:plugin:install --username=root'
    - 'glpi:plugin:activate'
  when:
    - GLPI_CHANGED | bool

- name: GLPI - Configure fusioninventory after db init
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - UPDATE glpi_plugin_fusioninventory_entities SET agent_base_url = 'http://127.0.0.1/glpi', transfers_id_auto = '1' WHERE id='1'
    - INSERT INTO glpi_plugin_fusioninventory_collects VALUES (1,'PulseRegistryCollects',0,1,'registry',1,'Registry values inventories')
    - UPDATE glpi_plugin_fusioninventory_configs SET value='0' WHERE type='manage_osname'
    - INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('2', '00020003-0004-0005-0006-000700080009')
    - INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('2', 'Not Settable')
    - INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', 'Not Applicable')
    - INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', '-')
    - INSERT INTO glpi_plugin_fusioninventory_inventorycomputerblacklists (plugin_fusioninventory_criterium_id, value) VALUES ('1', 'To be filled by O.E.M.')
  when:
    - GLPI_CHANGED | bool
    - GLPI_PLUGIN == 'fusioninventory'

- name: GLPI - Configure glpiinventory after glpi db init
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - UPDATE glpi_entities SET agent_base_url = 'http://127.0.0.1/glpi' WHERE id='1'
    - INSERT INTO glpi_plugin_glpiinventory_collects VALUES (1,'PulseRegistryCollects',0,1,'registry',1,'Registry values inventories')
    - UPDATE glpi_plugin_glpiinventory_configs SET value='0' WHERE type='manage_osname'
    - UPDATE glpi_configs SET value='1' WHERE name='enabled_inventory'
  when:
    - GLPI_CHANGED | bool
    - GLPI_PLUGIN == 'glpiinventory'

- name: GLPI - Set owner of /var/lib/glpi/files/_plugins/fusioninventory
  ansible.builtin.file:
    path: /var/lib/glpi/files/_plugins/fusioninventory
    state: directory
    recurse: yes
    owner: '{{ APACHE_USER }}'
  when:
    - GLPI_PLUGIN == 'fusioninventory'

- name: GLPI - Remove install.php file, not needed after the configuration.
  ansible.builtin.file:
    path: /usr/share/glpi/install/install.php
    state: absent
  when:
    - ansible_distribution == 'Debian'

- name: GLPI - Prevent glpi from begin automatically upgraded
  ansible.builtin.dpkg_selections:
    name: glpi
    selection: hold
  when:
    - ansible_distribution == 'Debian'

- name: GLPI - Prevent fusioninventory-for-glpi from begin automatically upgraded
  ansible.builtin.dpkg_selections:
    name: fusioninventory-for-glpi
    selection: hold
  when:
    - ansible_distribution == 'Debian'
    - GLPI_PLUGIN == 'fusioninventory'

- name: GLPI - Prevent glpi-inventory-plugin from begin automatically upgraded
  ansible.builtin.dpkg_selections:
    name: glpi-inventory-plugin
    selection: hold
  when:
    - ansible_distribution == 'Debian'
    - GLPI_PLUGIN == 'glpiinventory'

- name: GLPI - Set url_base in glpi_configs
  community.mysql.mysql_query:
    login_host: '{{ GLPI_DBHOST }}'
    login_port: '{{ GLPI_DBPORT }}'
    login_user: '{{ GLPI_DBUSER }}'
    login_password: '{{ GLPI_DBPASSWD }}'
    login_db: '{{ GLPI_DBNAME }}'
    query:
    - UPDATE glpi_configs SET value = 'http://{{ SERVER_FQDN }}/glpi/' WHERE name='url_base';
