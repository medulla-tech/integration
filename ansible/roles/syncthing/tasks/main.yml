##########################################################
#                    Install syncthing                   #
##########################################################

- name: Set version for this playbook
  ansible.builtin.set_fact:
    ROLE_VERSION: '1.1.0'

- name: Display version
  ansible.builtin.debug:
    msg:
    - "{{role_name}} version: {{ ROLE_VERSION }}"

- name: SYNCTHING - Add the OS specific variables
  ansible.builtin.include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}{{ ansible_distribution_major_version }}.yml"
    - "{{ ansible_os_family }}.yml"

- name: SYNCTHING - Install syncthing
  ansible.builtin.yum:
    pkg:
      - syncthing
    state: latest
  when:
    - ansible_distribution == 'CentOS' or ansible_distribution == 'RedHat'

- name: SYNCTHING - Install syncthing
  ansible.builtin.apt:
    pkg:
      - syncthing
    state: latest
  when:
    - ansible_distribution == 'Debian'

- name: SYNCTHING - Install tools needed for the setup
  ansible.builtin.yum:
    state: latest
    pkg:
      - python3-bcrypt
      - python3-passlib
  when:
    - ansible_distribution == 'CentOS'

- name: SYNCTHING - Install tools needed for the setup
  ansible.builtin.apt:
    state: latest
    pkg:
      - python3-bcrypt
      - python3-passlib
  when:
    - ansible_distribution == 'Debian'

- name: SYNCTHING - Create user accounts
  ansible.builtin.user:
    name: '{{ item.name }}'
    state: present
    createhome: yes
    home: '{{ item.home }}'
    shell: /sbin/nologin
    system: yes
  with_items:
    - { name: 'syncthing', home: '/var/lib/syncthing' }
    - { name: 'syncthing-depl', home: '/var/lib/syncthing-depl' }

- name: SYNCTHING - Create log file
  ansible.builtin.file:
    path: /var/log/syncthing.log
    mode: 0644
    state: touch
    owner: syncthing
    group: syncthing

- name: SYNCTHING - Configure logging
  ansible.builtin.copy:
    src: log.conf
    dest: /etc/systemd/system/syncthing@.service.d/
    mode: '0644'
  notify:
    - SYNCTHING - Restart syncthing

- name: SYNCTHING - Setup rotation of syncthing logs
  ansible.builtin.copy:
    src: syncthing
    dest: /etc/logrotate.d/
    mode: '0644'

- name: SYNCTHING - Force restart of service to generate config files
  ansible.builtin.systemd:
    name: syncthing@{{ item }}
    state: restarted
  with_items:
    - syncthing
    - syncthing-depl

- name: SYNCTHING - Pause for up to 300 seconds to enable syncthing start
  ansible.builtin.wait_for:
    path: /var/lib/syncthing/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml

- name: SYNCTHING - Pause for up to 300 seconds to enable syncthing-depl start
  ansible.builtin.wait_for:
    path: /var/lib/syncthing-depl/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml

- name: SYNCTHING - Get local device id for syncthing
  ansible.builtin.command: syncthing -home=/var/lib/syncthing/{{ SYNCTHING_CONF_FOLDER }}/syncthing/ -device-id
  register: localdeviceid

- name: SYNCTHING - Set LOCAL_DEVICE_ID for syncthing
  ansible.builtin.set_fact:
    LOCAL_DEVICE_ID: "{{ localdeviceid.stdout }}"

- name: SYNCTHING - Get local device id for syncthing-depl
  ansible.builtin.command: syncthing -home=/var/lib/syncthing-depl/{{ SYNCTHING_CONF_FOLDER }}/syncthing/ -device-id
  register: localdepldeviceid

- name: SYNCTHING - Set LOCALDEPL_DEVICE_ID for syncthing-depl
  ansible.builtin.set_fact:
    LOCALDEPL_DEVICE_ID: "{{ localdepldeviceid.stdout }}"

- name: SYNCTHING - Find pulsemain device id for syncthing
  ansible.builtin.command: syncthing -home=/var/lib/syncthing/{{ SYNCTHING_CONF_FOLDER }}/syncthing/ -device-id
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  register: pulsemaindeviceid
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set PULSEMAIN_DEVICE_ID for syncthing
  ansible.builtin.set_fact:
    PULSEMAIN_DEVICE_ID: '{{ pulsemaindeviceid.stdout }}'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Find pulsemain device id for syncthing-depl
  ansible.builtin.command: syncthing -home=/var/lib/syncthing-depl/{{ SYNCTHING_CONF_FOLDER }}/syncthing/ -device-id
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  register: pulsemaindepldeviceid
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set PULSEMAINDEPL_DEVICE_ID for syncthing-depl
  ansible.builtin.set_fact:
    PULSEMAINDEPL_DEVICE_ID: '{{ pulsemaindepldeviceid.stdout }}'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Reset STCONF_CHANGED variable
  ansible.builtin.set_fact:
    STCONF_CHANGED: False

- name: SYNCTHING - Check if .dbinitialised is present
  ansible.builtin.stat:
    path: /var/lib/syncthing/.dbinitialised
  register: resdbinitialised

- name: SYNCTHING - Set SYNCTHING_DBINITIALISED if .dbinitialised is present
  ansible.builtin.set_fact:
    SYNCTHING_DBINITIALISED: True
  when:
    - resdbinitialised.stat.exists

- name: SYNCTHING - Configure syncthing
  ansible.builtin.template:
    src: '{{ item.src }}'
    dest: /var/lib/{{ item.inst }}/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml
    mode: '0644'
    owner: '{{ item.inst }}'
    backup: yes
  with_items:
    - { src: config.xml.j2, inst: syncthing }
    - { src: config-depl.xml.j2, inst: syncthing-depl }
  when:
    - SYNCTHING_DBINITIALISED is not defined
  register: conf_init
  notify:
    - SYNCTHING - Restart syncthing

- name: SYNCTHING - Register STCONF_CHANGED variable
  ansible.builtin.set_fact:
    STCONF_CHANGED: '{{ conf_init.changed }}'
  when:
    conf_init.changed

- name: SYNCTHING - Set marker for syncthing initialisation
  ansible.builtin.file:
    path: /var/lib/syncthing/.dbinitialised
    state: touch
  when:
    - STCONF_CHANGED | bool

- name: SYNCTHING - Force restart of service to use new config files
  ansible.builtin.meta: flush_handlers

- name: SYNCTHING - Get Pulsemain Syncthing API Key
  community.general.xml:
    path: /var/lib/syncthing/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml
    xpath: /configuration/gui/apikey
    content: text
  register: xmlres
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set MAINSTAPIKEY variable
  ansible.builtin.set_fact:
    MAINSTAPIKEY: '{{ xmlres.matches[0].apikey }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Get Pulsemain Syncthing-depl API Key
  community.general.xml:
    path: /var/lib/syncthing-depl/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml
    xpath: /configuration/gui/apikey
    content: text
  register: xmlres
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Set MAINSTDEPLAPIKEY variable
  ansible.builtin.set_fact:
    MAINSTDEPLAPIKEY: '{{ xmlres.matches[0].apikey }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Get device id for relayserver
  ansible.builtin.command: xmlstarlet sel -t -v "configuration/device[@name='{{ XMPP_DOMAIN }}']/@id" /var/lib/syncthing/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml
  register: relay_device_id
  ignore_errors: yes
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Delete relayserver device from pulsemain syncthing waiting up to 5 minutes
  ansible.builtin.uri:
    url: "http://localhost:8384/rest/config/devices/{{ relay_device_id.stdout }}"
    headers:
      X-API-Key: '{{ MAINSTAPIKEY }}'
    method: DELETE
    status_code: 200
  throttle: 1
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''
    - not relay_device_id.failed
  register: result
  retries: 10
  delay: 30
  until: ('status' in result) and result.status == 200

- name: SYNCTHING - Get device id for relayserver
  ansible.builtin.command: xmlstarlet sel -t -v "configuration/device[@name='{{ XMPP_DOMAIN }}']/@id" /var/lib/syncthing-depl/{{ SYNCTHING_CONF_FOLDER }}/syncthing/config.xml
  register: relay_device_id
  ignore_errors: yes
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Delete relayserver device from pulsemain syncthing-depl waiting up to 5 minutes
  ansible.builtin.uri:
    url: "http://localhost:8385/rest/config/devices/{{ relay_device_id.stdout }}"
    headers:
      X-API-Key: '{{ MAINSTDEPLAPIKEY }}'
    method: DELETE
    status_code: 200
  throttle: 1
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''
    - not relay_device_id.failed
  register: result
  retries: 10
  delay: 30
  until: ('status' in result) and result.status == 200

- name: SYNCTHING - Add relayserver device to pulsemain syncthing waiting up to 5 minutes
  ansible.builtin.uri:
    url: "http://localhost:8384/rest/config/devices"
    headers:
      X-API-Key: '{{ MAINSTAPIKEY }}'
    method: POST
    body_format: json
    body:
      deviceID: "{{ LOCAL_DEVICE_ID }}"
      name: "{{ XMPP_DOMAIN }}"
      introducer: false
    status_code: 200
  throttle: 1
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''
  register: result
  retries: 10
  delay: 30
  until: ('status' in result) and result.status == 200

- name: SYNCTHING - Add relayserver device to pulsemain syncthing-depl waiting up to 5 minutes
  ansible.builtin.uri:
    url: "http://localhost:8385/rest/config/devices"
    headers:
      X-API-Key: '{{ MAINSTDEPLAPIKEY }}'
    method: POST
    body_format: json
    body:
      deviceID: "{{ LOCALDEPL_DEVICE_ID }}"
      name: "{{ XMPP_DOMAIN }}"
      introducer: false
    status_code: 200
  throttle: 1
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  when:
    - PULSEMAIN_IP != ''
  register: result
  retries: 10
  delay: 30
  until: ('status' in result) and result.status == 200

- name: SYNCTHING/APACHE - Setup local apache for syncthing
  ansible.builtin.copy:
    src: syncthing.conf
    dest: '{{ APACHE_CONF_PATH }}/'
    mode: '0644'
  notify:
    - SYNCTHING - Restart apache

- name: SYNCTHING/APACHE - Enable syncthing configuration
  ansible.builtin.command: a2enconf syncthing
  notify:
    - SYNCTHING - Restart apache
  when:
    - ansible_distribution == 'Debian'

- name: SYNCTHING/APACHE - Setup pulsemain apache for relay syncthing
  ansible.builtin.template:
    src: syncthing.conf.j2
    dest: '{{ APACHE_CONF_PATH }}/syncthing-{{ XMPP_DOMAIN }}.conf'
    mode: '0644'
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart apache on pulsemain
  when:
    - PULSEMAIN_IP != ''

- name: SYNCTHING/APACHE - Enable syncthing configuration
  ansible.builtin.command: a2enconf syncthing-{{ XMPP_DOMAIN }}
  vars:
    ansible_ssh_user: root
  delegate_to: '{{ PULSEMAIN_IP }}'
  notify:
    - SYNCTHING - Restart apache on pulsemain
  when:
    - ansible_distribution == 'Debian'
    - PULSEMAIN_IP != ''

- name: SYNCTHING - Ensure syncthing is running
  ansible.builtin.systemd:
    name: syncthing@{{ item }}
    state: started
    enabled: yes
    masked: no
  with_items:
    - syncthing
    - syncthing-depl
